/**
 * @file index.js
 * @author swan
 * @date 2020-01-06
 */

Page({
    data: {
        text: 'dest() 可以用在管道（pipeline）中间用于将文件的中间状态写入文件系统。'
            + '当接收到一个文件时，当前状态的文件将被写入文件系统，文件路径也将被修改以反映输出文件的新位置，然后该文件继续沿着管道（pipeline）传输。'
            + '此功能可用于在同一个管道（pipeline）中创建未压缩（unminified）和已压缩（minified）的文件文件路径也将被修改将被修将被修将被修修修',

        suteIn8p: 'dest() 可以用在管道（pipeline）中间用于将文件的中间状态写入文件系统。'
            + '当接收到一个文件时，当前状态的文件将被写入文件系统，文件路径也将被修改以反映输出文件的新位置，然后该文件继续沿着管道（pipeline）传输。'
            + '此功能可用于在同一个管道（pipeline',

        bigFontSize: 'dest() 可以用在管道（pipeline）中间用于将文件的中间状态写入文件系统。'
        + '当接收到一个文件时，当前状态的文件将被写入文件系统，文件路径也将被修改以反映输出文件的新位置，然后该文件继续沿着管道（pipeline）传输。'
        + '此功能可用于在同一个管道（pipeline',

        bigFontSizeSute8p: 'dest() 可以用在管道（pipeline）中间用于将文件的中间状态写入文件系统。'
        + '当接收到一个文件时，当前状态的文件将被写入文件系统，文件路径也将被修改以反映输出文件的新位置，然后该文件继续沿着管道（pipeline）传输。'
        + '此功能可',

        textPreline: 'dest() 可以用在管道（pipeline）\n中间用于将文件的中间状态写入文件系统。'
        + '\n当接收到一个文件时，当前状态的文件将被写入文件系统，文件路径也将被修改以反映输出文件的新位置，然后该文件继续沿着管道（pipeline）传输。'
        + '\n此功能可用于在同一个管道（pipeline）中创建未压缩（unminified）和已压缩（minified）的文件。',

        asyncText: '',

        countDown: 5
    },

    onLoad() {
        this.setData({
            asyncText: this.data.bigFontSize
        });

        const timer = setInterval(() => {
            this.setData({
                countDown: this.data.countDown - 1
            });

            if (this.data.countDown === 0) {
                this.setData({
                    asyncText: this.data.bigFontSizeSute8p
                });
                clearInterval(timer);
            }
        }, 1000);
    }
});
