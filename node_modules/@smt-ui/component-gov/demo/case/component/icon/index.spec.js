/**
 * @file mocha case for icon 组件校验
 * @author huangjing02
 */
/* globals before, after */
const expect = require('chai').expect;
const Driver = require('@baidu/smartium');
const {driverBefore} = require('../common/index');

describe('组件-icon', function () {
    const driver = new Driver();

    before(() => driverBefore(driver, '/test/case/component/icon/preview/icon'));
    it('校验type=add的单色icon组件能够有效渲染', async () => {
        const el = driver.findElement.byId('name-add-default');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });
    it('校验type=smart-game-m的多色icon组件能够有效渲染', async () => {
        const el = driver.findElement.byId('name-smart-game-default');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });
    it('校验type=add的单色icon组件改变size能够有效渲染', async () => {
        const el = driver.findElement.byId('name-add-size');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });
    it('校验type=smart-game-m的多色icon组件改变size能够有效渲染', async () => {
        const el = driver.findElement.byId('name-smart-game-size');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });
    it('校验type=add的单色icon组件使用string类型的color能够有效渲染', async () => {
        const el = driver.findElement.byId('name-add-color');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });
    it('校验type=smart-game-m的多色icon组件使用string类型的color能够有效渲染', async () => {
        const el = driver.findElement.byId('name-smart-game-color');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });
    it('校验type=add的icon组件使用array类型的color能够有效渲染', async () => {
        const el = driver.findElement.byId('name-add-colors');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });
    it('校验type=smart-game-m的icon组件使用array类型的color能够有效渲染', async () => {
        const el = driver.findElement.byId('name-smart-game-colors');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });
    it('校验type=add的icon组件使用6位的color能够有效渲染', async () => {
        const el = driver.findElement.byId('name-add-color-1');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });
    it('校验type=add的icon组件使用rgb格式的color能够有效渲染', async () => {
        const el = driver.findElement.byId('name-add-color-2');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });
    it('校验type=smart-game-m的icon组件使用6位的color能够有效渲染', async () => {
        const el = driver.findElement.byId('name-smart-game-color-1');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });
    it('校验type=smart-game-m的icon组件使用rgb格式的color能够有效渲染', async () => {
        const el = driver.findElement.byId('name-smart-game-color-2');
        let iconHasShown = await driver.element.isRender(el);
        expect(iconHasShown).to.equals(true);
    });

    after(async () => driver && await driver.close());
});
