/**
 * @file gulpfile
 * @author LipengJia <jialipeng@baidu.com>
 * @date 2020-01-02
 */

const gulp = require('gulp');
const stylus = require('gulp-stylus');
const using = require('gulp-using');
const rename = require('gulp-rename');
const lazypipe = require('lazypipe');
const ts = require('gulp-typescript');
const tsProj = ts.createProject('./tsconfig.json');
const babel = require('gulp-babel');
const px2rpxPlug = require('gulp-postcss-px2rpx');
const postcss = require('gulp-postcss');
const {promisify} = require('util');
const exec = promisify(require('child_process').exec);

const src = 'src/**/src/*';

const px2rpx = cssAst => {
    const px2rpxIns = new px2rpxPlug({
        noTrans1px: true,
        designWidth: 1242
    });
    px2rpxIns.trans(cssAst);
};

/**
 * toLib
 */
const destToLib = lazypipe()
    .pipe(
        rename,
        path => (path.dirname = path.dirname.replace(/\/src$/, '\/lib'))
    )
    .pipe(gulp.dest, file => file.base);

/**
 * 复制文件
 * @param {Function} done 回调
 */
const cpyFiles = done => {
    gulp.src([src, `!${src}.{ts,js,styl}`]).pipe(destToLib());
    done();
};

/**
 * 处理css
 */
const cssProcessor = () => {
    const stylusProcessor = done => {
        gulp.src(`${src}.styl`)
        .pipe(using({prefix: 'processing', color: 'green'}))
        .pipe(stylus())
        .pipe(postcss([px2rpx]))
        .pipe(destToLib());
        done();
    };
    return stylusProcessor;
};

/**
 * 处理ts
 */
const jsProcessor = () => {
    const tsProcessor = done => {
        gulp.src(`${src}.ts`)
        .pipe(using({prefix: 'processing', color: 'green'}))
        .pipe(tsProj())
        .pipe(destToLib());
        done();
    };

    const babelProcessor = done => {
        gulp.src(`${src}.js`)
        .pipe(using({prefix: 'processing', color: 'green'}))
        .pipe(babel({
            presets: ['@babel/env'],
            plugins: ['@babel/plugin-transform-runtime']
        }))
        .pipe(destToLib());
        done();
    };

    return gulp.parallel(tsProcessor, babelProcessor);
};

/**
 * 清理
 *
 * @param {String} path 要清理的路径
 * @inner
 */
const cleaner = path => {
    const clean = () => exec(`npx rimraf ${path}`);
    return clean;
};

/**
 * emptyWatcher
 */
const noop = done => done();

/**
 * task
 *
 * @param {Function=} watcher 监听方法
 */
const task = (watcher = noop) => gulp.series(
    cleaner('src/**/lib'),
    cpyFiles,
    gulp.parallel(cssProcessor(), jsProcessor()),
    watcher
);

/**
 * dev
 */
const dev = task(
    function watcher(done) {
        gulp.watch(src, cpyFiles);
        gulp.watch('src/**/src/*.{ts,js}', jsProcessor());
        gulp.watch('src/**/src/*.styl', cssProcessor());
        done();
    }
);

module.exports = {
    prod: task(),
    dev
};
