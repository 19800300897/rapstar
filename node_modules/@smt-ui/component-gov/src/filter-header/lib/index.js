"use strict";

var _behavior = require("../../common/utils/behavior");

var _index = require("../../common/utils/index");

var _px = require("../../common/utils/px");

var _color = require("../../common/style/color");

/**
 * @file filter-header组件
 * @author huangjing02
 */

/* globals Page, swan, getApp, getCurrentPages */
// import from '@smt-lib/observer'
Component({
  behaviors: [_behavior.events],
  externalClasses: ['gov-filter-header-wrapper', 'gov-filter-header', 'gov-filter-expand', 'gov-filter-selected', 'gov-filter-btn-text', 'gov-filter-arrow'],
  properties: {
    // 筛选器ID
    filterId: {
      type: String,
      value: ''
    },
    // 筛选项数组，数组格式[{text:'名称', value: '值，string/Array.<string>', options: [{text: '', value: ''}, {text: '', value: ''}]}]
    selections: {
      type: Array,
      value: [],
      observer: function observer(n) {
        this.updateComputedData();
      }
    },
    // 是否展开某项，如果传index，则展开某项。false则全部关闭
    expand: {
      type: [Boolean, Number],
      value: false,
      observer: function observer(n) {
        var idx = -1;

        if (typeof n === 'boolean') {
          this.index = n ? 0 : -1;
        } else {
          this.index = n;
        }

        this.setFilterIdx(idx);
      }
    },
    // 是否展现下边线
    border: {
      type: Boolean,
      value: true
    },
    // 页面顶部是有搜索框，有的话不带边线
    inSearch: {
      type: Boolean,
      value: false
    },
    // 高亮时的文字和icon颜色
    activeColor: {
      type: String,
      value: _color.COLOR_TIPS_RED
    },
    // 默认状态的文字颜色
    fontColor: {
      type: String,
      value: _color.COLOR_BLACK
    },
    // 默认状态的icon颜色
    iconColor: {
      type: String,
      value: _color.COLOR_GRAY_4
    },
    // 禁用状态的文字颜色
    disColor: {
      type: String,
      value: _color.COLOR_GRAY_2
    }
  },
  data: {
    // 当前选中的filter
    filterIdx: -1,
    // 上一个选中的filter
    lastFilterIdx: -1,
    // 所有filter的值
    filtersValue: [],
    // 是否ios
    isIos: _index.isIos,
    // 命名空间
    ns: '',
    // 标题宽度的数组
    textWidths: []
  },
  created: function created() {
    var _this = this;

    this.init();
    console.log(this.data.isIos);
    swan.nextTick(function () {
      _this.updateComputedData();
    });
  },
  methods: {
    updateComputedData: function updateComputedData() {
      var _this$data = this.data,
          filtersValue = _this$data.filtersValue,
          selections = _this$data.selections;
      var selected;

      if (!filtersValue.length || !selections.length) {
        selected = [];
      } else {
        selected = filtersValue.map(function (_ref, idx) {
          var value = _ref.value;

          if (Array.isArray(value)) {
            return JSON.stringify(value) === JSON.stringify(selections[idx].value);
          }

          return value === selections[idx].value;
        });
      }

      this.setData({
        selected: selected,
        cmptFiltersValue: this.data.filtersValue,
        textWidths: this.data.selections.map(function (_ref2) {
          var textWidth = _ref2.textWidth;
          return textWidth ? (0, _px.upx2dpx)(textWidth) + 'px' : '';
        })
      });
    },
    init: function init() {
      var _this2 = this;

      var expand = this.data.expand;
      var idx = typeof expand === 'number' ? expand : expand ? 0 : -1; // 初始化默认值

      this.setData({
        ns: "".concat((0, _index.getCurrentPage)().uri, "_").concat(this.data.filterId),
        filtersValue: this.data.selections.map(function (_ref3) {
          var text = _ref3.text,
              value = _ref3.value;
          return {
            text: text,
            value: value
          };
        }),
        filterIdx: idx,
        lastFilterIdx: idx
      });
      this.setFilterIdx(idx, -1); // 点了对应下拉菜单项，当前选中的filter值改变

      this.eventsEmitter.onMessage("filterValChange.".concat(this.data.ns), function (_ref4) {
        var selItem = _ref4.selItem;
        var filtersValue = _this2.data.filtersValue;
        filtersValue.splice(selItem.filterIdx, 1, selItem.selection);
        filtersValue.splice(0, 0);

        _this2.setData({
          filtersValue: filtersValue
        }, function () {
          _this2.updateComputedData();

          _this2.filterClose();

          swan.nextTick(function () {
            return _this2.triggerEvent('select', selItem);
          });
        });
      }); // 点了mask，要关闭

      this.eventsEmitter.onMessage("filterClose.".concat(this.data.ns), function () {
        return _this2.filterClose();
      });
    },
    filterClose: function filterClose() {
      var _this3 = this;

      var payload = {
        expand: false,
        filterIdx: this.data.filterIdx,
        lastFilterIdx: this.data.lastFilterIdx
      };
      this.setFilterIdx(-1, this.data.lastFilterIdx);
      this.setData({
        filterIdx: -1
      }, function () {
        _this3.triggerEvent('expand', payload);
      });
    },
    // 给body传选中的filterIdx，实现filter列表显/隐
    setFilterIdx: function setFilterIdx(index) {
      var lastFilterIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.lastFilterIdx;
      this.broadcast({
        type: "setFilterIdx.".concat(this.data.ns),
        index: index,
        lastFilterIdx: lastFilterIdx
      });
    },
    btnHdl: function btnHdl(e) {
      var index = e.currentTarget.dataset.index;
      var idx = this.data.filterIdx;

      if (idx !== index) {
        var payload = {
          expand: true,
          filterIdx: index,
          lastFilterIdx: idx
        };
        this.triggerEvent('expand', payload);
        this.setFilterIdx(index, this.data.lastFilterIdx); // 取消选择：1. 点不同的filter-btn 2. 点当前展开的btn 3. 点蒙层

        if (idx !== -1) {
          this.broadcast({
            type: "cancelSelect.".concat(this.data.ns)
          });
        }

        this.setData({
          filterIdx: index,
          lastFilterIdx: index
        });
      } else {
        this.filterClose();
        this.broadcast({
          type: "cancelSelect.".concat(this.data.ns)
        });
      }
    }
  }
});