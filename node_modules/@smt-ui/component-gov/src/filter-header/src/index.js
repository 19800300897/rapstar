/**
 * @file filter-header组件
 * @author huangjing02
 */

/* globals Page, swan, getApp, getCurrentPages */
// import from '@smt-lib/observer'

import {events} from '../../common/utils/behavior';
import {isIos, getCurrentPage} from '../../common/utils/index';
import {upx2dpx} from '../../common/utils/px';
import {COLOR_TIPS_RED, COLOR_BLACK, COLOR_GRAY_2, COLOR_GRAY_4} from '../../common/style/color';


Component({
    behaviors: [events],

    externalClasses: [
        'gov-filter-header-wrapper',
        'gov-filter-header',
        'gov-filter-expand',
        'gov-filter-selected',
        'gov-filter-btn-text',
        'gov-filter-arrow'
    ],

    properties: {
        // 筛选器ID
        filterId: {
            type: String,
            value: ''
        },

        // 筛选项数组，数组格式[{text:'名称', value: '值，string/Array.<string>', options: [{text: '', value: ''}, {text: '', value: ''}]}]
        selections: {
            type: Array,
            value: [],
            observer(n) {
                this.updateComputedData();
            }
        },

        // 是否展开某项，如果传index，则展开某项。false则全部关闭
        expand: {
            type: [Boolean, Number],
            value: false,
            observer(n) {
                let idx = -1;
                if (typeof n === 'boolean') {
                    this.index = n ? 0 : -1;
                }
                else {
                    this.index = n;
                }
                this.setFilterIdx(idx);
            }
        },

        // 是否展现下边线
        border: {
            type: Boolean,
            value: true
        },

        // 页面顶部是有搜索框，有的话不带边线
        inSearch: {
            type: Boolean,
            value: false
        },

        // 高亮时的文字和icon颜色
        activeColor: {
            type: String,
            value: COLOR_TIPS_RED
        },

        // 默认状态的文字颜色
        fontColor: {
            type: String,
            value: COLOR_BLACK
        },

        // 默认状态的icon颜色
        iconColor: {
            type: String,
            value: COLOR_GRAY_4
        },

        // 禁用状态的文字颜色
        disColor: {
            type: String,
            value: COLOR_GRAY_2
        }
    },

    data: {
        // 当前选中的filter
        filterIdx: -1,

        // 上一个选中的filter
        lastFilterIdx: -1,

        // 所有filter的值
        filtersValue: [],

        // 是否ios
        isIos,

        // 命名空间
        ns: '',

        // 标题宽度的数组
        textWidths: []
    },

    created() {
        this.init();
        console.log(this.data.isIos);
        swan.nextTick(() => {
            this.updateComputedData();
        });
    },

    methods: {
        updateComputedData() {
            const {filtersValue, selections} = this.data;
            let selected;
            if (!filtersValue.length || !selections.length) {
                selected = [];
            }
            else {
                selected = filtersValue.map(({value}, idx) => {
                    if (Array.isArray(value)) {
                        return JSON.stringify(value) === JSON.stringify(selections[idx].value);
                    }
                    return value === selections[idx].value;
                });
            }
            this.setData({
                selected,
                cmptFiltersValue: this.data.filtersValue,
                textWidths: this.data.selections.map(({textWidth}) => (textWidth ? (upx2dpx(textWidth) + 'px') : ''))
            });
        },

        init() {
            let expand = this.data.expand;
            let idx = typeof expand === 'number' ? expand : (expand ? 0 : -1);
            // 初始化默认值
            this.setData({
                ns: `${getCurrentPage().uri}_${this.data.filterId}`,
                filtersValue: this.data.selections.map(({text, value}) => ({text, value})),
                filterIdx: idx,
                lastFilterIdx: idx
            });

            this.setFilterIdx(idx, -1);



            // 点了对应下拉菜单项，当前选中的filter值改变
            this.eventsEmitter.onMessage(`filterValChange.${this.data.ns}`, ({selItem}) => {


                let filtersValue = this.data.filtersValue;
                filtersValue.splice(selItem.filterIdx, 1, selItem.selection);
                filtersValue.splice(0, 0);

                this.setData({
                    filtersValue
                }, () => {
                    this.updateComputedData();
                    this.filterClose();
                    swan.nextTick(() => this.triggerEvent('select', selItem));
                });
            });

            // 点了mask，要关闭
            this.eventsEmitter.onMessage(`filterClose.${this.data.ns}`, () => this.filterClose());
        },



        filterClose() {
            const payload = {
                expand: false,
                filterIdx: this.data.filterIdx,
                lastFilterIdx: this.data.lastFilterIdx
            };
            this.setFilterIdx(-1, this.data.lastFilterIdx);
            this.setData({
                filterIdx: -1
            }, () => {
                this.triggerEvent('expand', payload);
            });
        },

        // 给body传选中的filterIdx，实现filter列表显/隐
        setFilterIdx(index, lastFilterIdx = this.lastFilterIdx) {
            this.broadcast({
                type: `setFilterIdx.${this.data.ns}`,
                index, lastFilterIdx
            });
        },

        btnHdl(e) {
            let index = e.currentTarget.dataset.index;
            let idx = this.data.filterIdx;

            if (idx !== index) {
                const payload = {
                    expand: true,
                    filterIdx: index,
                    lastFilterIdx: idx
                };

                this.triggerEvent('expand', payload);
                this.setFilterIdx(index, this.data.lastFilterIdx);
                // 取消选择：1. 点不同的filter-btn 2. 点当前展开的btn 3. 点蒙层
                if (idx !== -1) {
                    this.broadcast({
                        type: `cancelSelect.${this.data.ns}`
                    });
                }
                this.setData({
                    filterIdx: index,
                    lastFilterIdx: index
                });
            }
            else {
                this.filterClose();
                this.broadcast({
                    type: `cancelSelect.${this.data.ns}`
                });
            }
        }
    }


});
