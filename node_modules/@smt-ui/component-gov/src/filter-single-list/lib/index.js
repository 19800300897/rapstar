"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _index = require("../../common/utils/index");

var _color = require("../../common/style/color");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Component({
  externalClasses: ['gov-filter-singlelist'],
  properties: {
    // 筛选器ID
    options: {
      type: Array,
      value: []
    },
    // 筛选项数组，数组格式[{text:'名称', value: '值，string/Array.<string>', options: [{text: '', value: ''}, {text: '', value: ''}]}]
    optionKey: {
      type: String,
      value: '',
      observer: function observer(n) {
        this.setData({
          currOptionKey: n || 'text'
        });
      }
    },
    value: {
      type: String,
      value: ''
    },
    // 高亮时的文字和icon颜色
    activeColor: {
      type: String,
      value: _color.COLOR_TIPS_RED
    },
    // 默认状态的文字颜色
    fontColor: {
      type: String,
      value: _color.COLOR_BLACK
    }
  },
  data: {
    // 是否ios
    isIos: _index.isIos,
    // 当前选中key
    currOptionKey: ''
  },
  methods: {
    selHdl: function selHdl(e) {
      var _e$currentTarget$data = e.currentTarget.dataset,
          value = _e$currentTarget$data.value,
          key = _e$currentTarget$data.key,
          idx = _e$currentTarget$data.idx;
      this.selInnerHdl(value, key, idx);
    },
    selInnerHdl: function selInnerHdl(value, text, index) {
      var fillback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      this.triggerEvent('change', {
        type: 'singleList',
        index: index,
        text: text,
        value: value,
        fillback: fillback
      });
    },
    setValue: function setValue(val) {
      var _iterator = _createForOfIteratorHelper(this.data.options.entries()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = (0, _slicedToArray2["default"])(_step.value, 2),
              idx = _step$value[0],
              opt = _step$value[1];

          if (opt.value === val) {
            return this.selInnerHdl(val, opt[this.data.currOptionKey] || opt, idx, true);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }
});