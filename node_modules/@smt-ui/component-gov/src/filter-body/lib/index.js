"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _behavior = require("../../common/utils/behavior");

var _index = require("../../common/utils/index");

var _color = require("../../common/style/color");

/**
 * @file filter-header组件
 * @author huangjing02
 */

/* globals Page, swan, getApp, getCurrentPages */
// import from '@smt-lib/observer'
Component({
  behaviors: [_behavior.events],
  externalClasses: ['gov-filter-mask', 'gov-filter-select-list', 'gov-filter-content'],
  properties: {
    // 筛选器ID
    filterId: {
      type: String,
      value: ''
    },
    // 筛选项数组，数组格式[{text:'名称', value: '值，string/Array.<string>', options: [{text: '', value: ''}, {text: '', value: ''}]}]
    selections: {
      type: Array,
      value: [],
      observer: function observer(n) {
        //  deep: true (不知道如何体现)
        this.setData('filtersValue', n.map(function (_ref) {
          var text = _ref.text,
              value = _ref.value;
          return {
            text: text,
            value: value
          };
        }));
      }
    },
    // 可重复点击选项 -- 例如需要实时刷新数据
    repeatable: {
      type: Boolean,
      value: true
    },
    // 高亮时的文字和icon颜色
    activeColor: {
      type: String,
      value: _color.COLOR_TIPS_RED
    },
    // 复选在inline 模式选中时的选项背景颜色
    activeInlineBgColor: {
      type: String,
      value: _color.COLOR_RED_LIGHT
    },
    // 默认状态的文字颜色
    fontColor: {
      type: String,
      value: _color.COLOR_BLACK
    }
  },
  data: {
    // 当前选中的filter
    filterIdx: -1,
    // 对应filter的列表
    filtersValue: [],
    // [{text: '', value: ''}, {}]
    // 上一个激活的filter 索引
    lastActiveFilterIdx: -1,
    // 上一次选中的项
    lastSelItem: {},
    // 是否ios
    isIos: _index.isIos,
    // 命名空间
    ns: ''
  },
  created: function created() {
    var _this = this;

    if (!Array.isArray(this.data.selections)) {
      throw 'selections prop必须是数组';
    } // 初始化默认值


    this.setData({
      ns: "".concat((0, _index.getCurrentPage)().uri, "_").concat(this.data.filterId),
      filtersValue: this.data.selections.map(function (_ref2) {
        var text = _ref2.text,
            value = _ref2.value;
        return {
          text: text,
          value: value
        };
      })
    });
    this.eventsEmitter.onMessage("setFilterIdx.".concat(this.data.ns), function (res) {
      var nodeId = res.nodeId,
          index = res.index,
          lastFilterIdx = res.lastFilterIdx;

      _this.setData({
        filterIdx: index,
        lastActiveFilterIdx: lastFilterIdx
      }, function () {
        swan.nextTick(function () {
          return _this.expandSelect(index);
        });
      });
    }); // 点了mask，要关闭

    this.eventsEmitter.onMessage("cancelSelect.".concat(this.data.ns), function () {
      return _this.cancelSelect();
    });
  },
  methods: {
    selContent: function selContent(index) {
      var _this2 = this;

      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(index == null)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", console.error('selContent的index必传！'));

              case 2:
                return _context.abrupt("return", new Promise(function (r, j) {
                  swan.createSelectorQuery()["in"](_this2).selectAll('.select-list > .filter-content').fields({
                    id: true
                  }, function (idList) {
                    try {
                      // 自定义筛选取不到组件
                      if (_this2.data.selections[index].slot) {
                        return r({
                          type: 'slot自定义筛选'
                        });
                      }

                      var current = idList[index] && idList[index].id && _this2.selectComponent(idList[index].id);

                      current ? r(current) : j('选择自定义组件错误');
                    } catch (err) {
                      j(err);
                    }
                  }).exec();
                }));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    expandSelect: function expandSelect(index) {
      var _this3 = this;

      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var content;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(index < 0)) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                _context2.prev = 2;
                _context2.next = 5;
                return _this3.selContent(index);

              case 5:
                content = _context2.sent;
                typeof content.expand === 'function' && content.expand();
                _context2.next = 12;
                break;

              case 9:
                _context2.prev = 9;
                _context2.t0 = _context2["catch"](2);
                console.error(_context2.t0);

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[2, 9]]);
      }))();
    },
    cancelSelect: function cancelSelect(mask) {
      var _this4 = this;

      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        var index, content;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // 级联筛选取消选择 小程序bug: v-for所有已移除节点都选到
                // // const filters = this.selectAllComponents('.filter-content');
                if (mask) {
                  _this4.broadcast({
                    type: "filterClose.".concat(_this4.data.ns)
                  }); // mask && this.$eventHub.emit(`filterClose.${this.ns}`);

                }

                index = _this4.data.lastActiveFilterIdx;

                if (!(index < 0)) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt("return");

              case 4:
                _context3.prev = 4;
                _context3.next = 7;
                return _this4.selContent(index);

              case 7:
                content = _context3.sent;
                typeof content.cancel === 'function' && content.cancel();
                _context3.next = 14;
                break;

              case 11:
                _context3.prev = 11;
                _context3.t0 = _context3["catch"](4);
                console.error(_context3.t0);

              case 14:
                _this4.triggerEvent('cancel', index);

              case 15:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[4, 11]]);
      }))();
    },
    changeFilter: function changeFilter(selItem) {
      var fillback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var filterIdx = selItem.filterIdx,
          selection = selItem.selection;
      var val = this.data.filtersValue;
      val.splice(filterIdx, 1, selection);
      this.setData('filtersValue', val);
      fillback && (selItem.filterIdx = this.data.fillBackIdx);
      this.broadcast({
        type: "filterValChange.".concat(this.data.ns),
        selItem: selItem
      });
    },
    // 比较下拉列表选值是否相同
    itemIdxEqual: function itemIdxEqual(currSln, lastItem) {
      if (!lastItem.selection) {
        return false;
      }

      var lastSln = lastItem.selection;

      if (currSln.type !== lastSln.type) {
        return false;
      }

      var currSlnIdx = null;
      var lastSlnIdx = null;

      if (currSln.type === 'singleList') {
        lastSlnIdx = lastSln && lastSln.index;
        currSlnIdx = currSln && currSln.index;
      } else if (currSln.type === 'cascade') {
        lastSlnIdx = lastSln && JSON.stringify(lastSln.casIndex);
        currSlnIdx = currSln && JSON.stringify(currSln.casIndex);
      } else {
        lastSlnIdx = lastSln && JSON.stringify(lastSln.value);
        currSlnIdx = currSln && JSON.stringify(currSln.value);
      }

      return lastSlnIdx === currSlnIdx;
    },
    itemChange: function itemChange(_ref3) {
      var item = _ref3.detail;
      var _this$data = this.data,
          filterIdx = _this$data.filterIdx,
          lastSelItem = _this$data.lastSelItem,
          repeatable = _this$data.repeatable,
          fillBackIdx = _this$data.fillBackIdx;
      item.fillback && (filterIdx = fillBackIdx);

      if (filterIdx === lastSelItem.filterIdx && this.itemIdxEqual(item, lastSelItem) && !repeatable) {
        return this.cancelSelect(true);
      }

      var selItem = {
        filterIdx: filterIdx,
        selection: item
      };
      this.changeFilter(selItem, item.fillback || false);
      this.setData('lastSelItem', selItem);
    },
    setValue: function setValue(idx, val) {
      var _this5 = this;

      // 级联筛选取消选择
      // 禁止直接使用selectAllComponents 选择s-for 的节点
      // const filters = this.selectAllComponents('filter-content');
      swan.createSelectorQuery()["in"](this).selectAll('.select-list > .filter-content').fields({
        id: true
      }, function (idList) {
        try {
          var current = idList[idx] && idList[idx].id && _this5.selectComponent(idList[idx].id);

          if (current && typeof current.setValue === 'function') {
            _this5.setData('fillBackIdx', idx);

            current.setValue(val);
          }
        } catch (err) {
          console.error('选择自定义组件错误: ', err);
        }
      }).exec();
    },
    noop: function noop() {}
  }
});