"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _color = require("../../common/style/color");

/**
 * @file notice-bar
 * @author LipengJia (jialipeng@baidu.com)
 * @date 2019-12-19
 */

/* global swan */
Component({
  // eslint-disable-line
  externalClasses: ['ext-cls', 'text-cls'],
  properties: {
    text: {
      type: String,
      value: '通知栏:notice-bar',
      observer: function observer() {
        this.init();
      }
    },
    bgColor: {
      type: String,
      value: ''
    },
    textColor: {
      type: String,
      value: ''
    },
    icon: {
      type: Boolean,
      value: true
    },
    iconName: {
      type: String,
      value: 'close'
    },
    iconColor: {
      type: [Array, String],
      value: _color.COLOR_ORANGE
    },
    scroll: {
      type: Boolean,
      value: true
    },
    delay: {
      type: Number,
      value: 1
    },
    // 速度：px/s; 默认50
    speed: {
      type: Number,
      value: 50
    }
  },
  data: {
    // 第二轮进入循环
    infinite: false,
    // 容器宽度 判断是否超出开启滚动
    containerWidth: 0,
    // 文本宽度，计算速度
    textWidth: 0,
    // 动画配置
    animationData: null,
    show: true
  },
  methods: {
    getWidths: function getWidths(selector) {
      var _this = this;

      return new Promise(function (r) {
        return _this.createSelectorQuery()["in"](_this).select(selector).boundingClientRect(function (_ref) {
          var width = _ref.width;
          return r(width);
        }).exec();
      });
    },

    /**
     * 初始化函数
     * 通过字数获取宽度不准，因为
     */
    init: function init() {
      var _this2 = this;

      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _yield, _yield2, containerWidth, textWidth, duration;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (_this2.data.scroll) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                _context.next = 4;
                return _this2.getWidths('.notice-bar .text-container');

              case 4:
                _context.t0 = _context.sent;
                _context.next = 7;
                return _this2.getWidths('.notice-bar .text-container .text');

              case 7:
                _context.t1 = _context.sent;
                _context.next = 10;
                return [_context.t0, _context.t1];

              case 10:
                _yield = _context.sent;
                _yield2 = (0, _slicedToArray2["default"])(_yield, 2);
                containerWidth = _yield2[0];
                textWidth = _yield2[1];
                duration = +(textWidth / _this2.data.speed * 1000).toFixed(2);

                _this2.setData({
                  textWidth: textWidth,
                  containerWidth: containerWidth
                }, function () {
                  if (textWidth > containerWidth) {
                    setTimeout(function () {
                      return _this2.genAnimate(duration, textWidth);
                    }, _this2.data.delay * 1000);
                  }
                });

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },

    /**
     * 生成动画
     * @param {number} duration 动画时长
     */
    genAnimate: function genAnimate(duration, distance) {
      var _this3 = this;

      // 须先复位
      var animation = swan.createAnimation({
        duration: 0
      });
      animation.translate3d(0, 0, 0).step();
      this.setData({
        animationData: animation["export"]()
      }, function () {
        var animation = swan.createAnimation({
          duration: duration
        });
        animation.translate3d(0, 0, 0).translateX("-".concat(distance, "px"), 0, 0).step();

        _this3.setData({
          animationData: animation["export"]()
        });
      });
    },
    aniEndHdl: function aniEndHdl() {
      var _this4 = this;

      var _this$data = this.data,
          textWidth = _this$data.textWidth,
          speed = _this$data.speed,
          containerWidth = _this$data.containerWidth,
          infinite = _this$data.infinite;
      var duration = +((textWidth + containerWidth) / speed * 1000).toFixed(2);

      var fn = function fn() {
        return _this4.genAnimate(duration, textWidth + containerWidth);
      };

      if (!infinite) {
        this.setData({
          infinite: true
        }, fn);
      } else {
        fn();
      }
    },
    closeHdl: function closeHdl() {
      this.setData({
        show: false,
        animationData: null
      });
      this.triggerEvent('close');
    }
  },
  created: function created() {
    this.init();
  }
});