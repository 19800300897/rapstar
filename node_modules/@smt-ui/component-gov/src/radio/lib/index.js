"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _color = require("../../common/style/color");

var _index = require("../../common/utils/index");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Component({
  externalClasses: ['gov-radio'],
  properties: {
    value: {
      type: Boolean,
      value: false,
      observer: function observer(n) {
        this.updateIcon();
      }
    },
    inline: {
      type: Boolean,
      value: false
    },
    disabled: {
      type: Boolean,
      value: false,
      observer: function observer(n) {
        this.updateIcon();
      }
    },
    border: {
      type: Boolean,
      value: false
    },
    itemStyle: {
      type: String,
      value: ''
    },
    cancelable: {
      type: Boolean,
      value: false
    },
    desc: {
      type: String,
      value: ''
    },
    textStyle: {
      type: String,
      value: ''
    },
    tick: {
      type: Boolean,
      value: false
    },
    inFilter: {
      type: Boolean,
      value: false
    },
    activeColor: {
      type: String,
      value: _color.COLOR_TIPS_RED
    },
    activeBgColor: {
      type: String,
      value: _color.COLOR_RED_LIGHT
    }
  },
  data: {
    iconSize: '39.855rpx',
    iconSizeFilter: '30.193rpx',
    tickIconSize: '59.783rpx',
    iconsty: {
      name: '',
      color: ''
    },
    isIos: _index.isIos
  },
  created: function created() {
    this.updateIcon();
  },
  methods: {
    clkHdl: function clkHdl() {
      var _this$data = this.data,
          disabled = _this$data.disabled,
          value = _this$data.value,
          cancelable = _this$data.cancelable;
      var isBreak = this.disabled || !this.cancelable && value;
      this.triggerEvent('click', {
        disabled: disabled,
        value: isBreak ? value : !value,
        cancelable: cancelable
      });

      if (isBreak) {
        return;
      }

      var checked = !value;
      this.triggerEvent('change', checked);
    },
    updateIcon: function updateIcon() {
      var _this$data2 = this.data,
          value = _this$data2.value,
          disabled = _this$data2.disabled,
          inFilter = _this$data2.inFilter,
          tick = _this$data2.tick,
          activeColor = _this$data2.activeColor,
          activeBgColor = _this$data2.activeBgColor;

      if (tick) {
        return;
      }

      var icon = {
        name: '',
        color: ''
      }; // 禁用

      if (disabled) {
        icon.name = 'radio-forbid';
        icon.color = ['#f1f1f1', _color.COLOR_GRAY_4];
      } // 非选中
      else if (!value) {
          icon.name = 'radio-uncheck';
          icon.color = _color.COLOR_GRAY_4;
        } else {
          icon.name = inFilter ? 'checked-s' : 'radio-checked';
          icon.color = inFilter ? [activeColor, _color.COLOR_WHITE] : activeColor;
        }

      this.setData({
        iconsty: icon,
        textStyle: _objectSpread(_objectSpread({}, this.data.textStyle), {}, {
          'background-color': value && inFilter ? activeBgColor : ''
        })
      });
    }
  }
});