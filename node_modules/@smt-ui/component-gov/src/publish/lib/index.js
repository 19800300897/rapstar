"use strict";

var _index = require("../../common/utils/index");

var _color = require("../../common/style/color");

/**
 * @file index.js
 * @author swan
 * @date 2020-03-09
 */
Component({
  externalClasses: [],
  properties: {
    botton: {
      type: String,
      value: ''
    },
    bottoncolor: {
      type: String,
      value: _color.COLOR_RED
    },
    hasButtonTop: {
      type: Boolean,
      value: true
    },
    placeholder: {
      type: String,
      value: ''
    },
    maxlength: {
      type: Number,
      value: 999
    },
    imageList: {
      type: Array,
      value: []
    },
    count: {
      type: Number,
      value: 6
    },
    tips: {
      type: String,
      value: ''
    },
    border: {
      type: Boolean,
      value: false
    },
    sizeType: {
      type: Array,
      value: ['compressed']
    },
    sourceType: {
      type: Array,
      value: ['album', 'camera']
    },
    imgMode: {
      type: String,
      value: 'aspectFill'
    },
    inline: {
      type: Boolean,
      value: false
    },
    url: {
      type: String,
      value: ''
    },
    name: {
      type: String,
      value: 'file'
    },
    header: {
      type: Object,
      value: {
        'content-type': 'application/json'
      }
    },
    formData: {
      type: Object,
      value: {
        'user': 'swan'
      }
    },
    limitSize: {
      type: Number
    },
    showSizeToast: {
      type: Boolean,
      value: false
    },
    // 文本域内容
    value: {
      type: String,
      value: ''
    },
    // 指定光标与键盘的距离
    cursorSpacing: {
      type: Number,
      value: 6
    },
    // 键盘弹起时，是否自动上推页面
    adjustPosition: {
      type: Boolean,
      value: true
    },
    // 键盘上方是否显示”完成“按钮栏
    showConfirmBar: {
      type: Boolean,
      value: true
    },
    showTip: {
      type: Boolean,
      value: false
    },
    buttonDisabled: {
      type: Boolean,
      value: true
    }
  },
  data: {
    isFullScreen: _index.isFullScreen
  },
  clickBtn: function clickBtn() {
    this.triggerEvent('clickBtn');
  },
  publishbtn: function publishbtn() {
    this.triggerEvent('publishbtn');
  },
  blur: function blur(_ref) {
    var detail = _ref.detail;
    this.triggerEvent('blur', detail);
  },
  input: function input(_ref2) {
    var detail = _ref2.detail;
    this.triggerEvent('input', detail);
  },
  urlempty: function urlempty(_ref3) {
    var detail = _ref3.detail;
    this.triggerEvent('urlempty', detail);
  },
  uploadsuccess: function uploadsuccess(e) {
    this.triggerEvent('uploadsuccess', e);
  },
  clickDelete: function clickDelete(e) {
    this.triggerEvent('delete', e);
  },
  limitsizeerr: function limitsizeerr() {
    this.triggerEvent('limitsizeerr');
  },
  chooserr: function chooserr(e) {
    this.triggerEvent('chooserr', e);
  },
  reserror: function reserror(e) {
    this.triggerEvent('reserror', e);
  },
  uploadfail: function uploadfail(e) {
    this.triggerEvent('uploadfail', e);
  },
  previewsuccess: function previewsuccess(e) {
    this.triggerEvent('previewsuccess', e);
  },
  previewfail: function previewfail(e) {
    this.triggerEvent('previewfail', e);
  }
});