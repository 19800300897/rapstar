"use strict";

/**
 * @file 自定义开关组件
 * @author swan
 */
var prefixCls = 'baidu-switch';
Component({
  behaviors: ['swan://form-field'],
  externalClasses: ['gov-inner-class', 'gov-before-class', 'gov-after-class'],
  properties: {
    value: {
      type: [String, Number, Boolean],
      value: false,
      observer: function observer(newVal, oldVal) {
        this.computedValue();
        this.computedWrapClasses();
      }
    },
    trueValue: {
      type: [String, Number, Boolean],
      value: true,
      observer: function observer(newVal, oldVal) {
        this.computedWrapClasses();
      }
    },
    falseValue: {
      type: [String, Number, Boolean],
      value: false,
      observer: function observer(newVal, oldVal) {
        this.computedWrapClasses();
      }
    },
    disabled: {
      type: Boolean,
      value: false,
      observer: function observer(newVal, oldVal) {
        this.computedWrapClasses();
      }
    },
    loading: {
      type: Boolean,
      value: false,
      observer: function observer(newVal, oldVal) {
        this.computedWrapClasses();
      }
    },
    activeColor: {
      type: String,
      value: '',
      observer: function observer() {}
    },
    inactiveColor: {
      type: String,
      value: '',
      observer: function observer() {}
    }
  },
  data: {
    currentValue: false,
    innerClasses: "".concat(prefixCls, "-inner"),
    wrapClasses: []
  },
  lifetimes: {
    attached: function attached() {
      // 计算switch的value
      this.computedValue(); // 计算样式

      this.computedWrapClasses();
    }
  },
  methods: {
    toggle: function toggle() {
      if (this.data.disabled || this.data.loading) {
        return false;
      }

      var checked = this.data.currentValue === this.data.trueValue ? this.data.falseValue : this.data.trueValue;
      this.setData({
        currentValue: checked
      }); // 改变样式

      this.computedWrapClasses();
      this.triggerEvent('change', checked);
    },
    computedValue: function computedValue() {
      this.setData({
        currentValue: this.data.value
      });
    },
    computedWrapClasses: function computedWrapClasses() {
      var wrapClasses = ["".concat(prefixCls)];

      if (this.data.currentValue === this.data.trueValue) {
        wrapClasses.push("".concat(prefixCls, "-checked"));
      }

      if (!!this.data.disabled) {
        wrapClasses.push("".concat(prefixCls, "-disabled"));
      }

      if (!!this.data.loading) {
        wrapClasses.push("".concat(prefixCls, "-loading"));
      }

      wrapClasses = wrapClasses.join(' ');
      this.setData({
        wrapClasses: wrapClasses
      });
    }
  }
});