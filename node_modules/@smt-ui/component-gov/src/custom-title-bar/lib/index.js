"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _observer = _interopRequireDefault(require("@smt-lib/observer"));

var _index = require("../../common/utils/index");

/**
 * @file 自定义沉浸式顶栏
 * @author swan
 */

/* global Page, swan, getApp, getCurrentPages, navigateBack */
var statusBarHeight = _index.systemInfo.statusBarHeight,
    navigationBarHeight = _index.systemInfo.navigationBarHeight;
var E = new _observer["default"]();
var COLOR = {
  BLACK: '#000000',
  WHITE: '#ffffff'
};
Component({
  externalClasses: ['gov-page-title', 'gov-fixed-nav-bar', 'gov-opacity-nav-bar', 'gov-title-area-bar'],
  properties: {
    // 普通导航栏是否为透明且不占高度，默认透明，如否需要传入普通导航栏的背景色commonBgColor
    commonBgOpacity: {
      type: Boolean,
      value: true
    },
    // 普通导航栏页面标题
    commonTitle: {
      type: String,
      value: ''
    },
    // 普通导航栏标题显示类型
    commonTextAlign: {
      type: String,
      value: 'center'
    },
    // 普通导航栏的背景色
    commonBgColor: {
      type: String,
      value: ''
    },
    // 普通导航栏上内容的颜色，对标swan.setNavigationBarColor中的frontColor设置规则，仅支持黑白两种，默认白色
    commonFrontColor: {
      type: String,
      value: COLOR.WHITE
    },
    // 普通导航栏是否有下边框
    commonHasBorder: {
      type: Boolean,
      value: false
    },
    // 是否需要滚动后切换导航栏
    showFixedBar: {
      type: Boolean,
      value: true
    },
    // 切换导航栏起始位置，默认状态栏的高度
    switchStartPosition: {
      type: Number,
      value: statusBarHeight
    },
    // 切换导航栏终止位置，需animation为true时使用才有效果
    switchEndPosition: {
      type: Number,
      value: '100px'
    },
    // 固定导航栏页面标题
    fixedTitle: {
      type: String,
      value: ''
    },
    // 固定导航栏标题显示类型
    fixedTextAlign: {
      type: String,
      value: 'center'
    },
    // 固定导航栏的背景色
    fixedBgColor: {
      type: String,
      value: COLOR.WHITE
    },
    // 固定导航栏上内容的颜色，对标swan.setNavigationBarColor中的frontColor设置规则，仅支持黑白两种，默认黑色
    fixedFrontColor: {
      type: String,
      value: COLOR.BLACK
    },
    // 固定导航栏是否有下边框
    fixedHasBorder: {
      type: Boolean,
      value: false
    },
    // 页面滚动时出现导航栏是否需要渐显动画，默认展示动画
    animation: {
      type: Boolean,
      value: true
    },
    // 是否需要返回按钮
    needToReturn: {
      type: Boolean,
      value: false
    },
    // 返回路径，默认为空即返回上一页
    returnPath: {
      type: String,
      value: ''
    },
    // 返回按钮是否需要自定义事件
    customNavBack: {
      type: Boolean,
      value: false
    },
    // 点击房子icon时的返回方式
    navType: {
      type: String,
      value: 'navigateTo'
    }
  },
  data: {
    navigationBarHeight: navigationBarHeight,
    statusBarHeight: statusBarHeight,
    isIos: _index.isIos,
    fixedOpacity: 0,
    hideCommonBar: false,
    isShowBackHomeIcon: false
  },
  lifetimes: {
    ready: function ready() {
      var isShowBackHomeIcon = getCurrentPages().length === 1;
      this.setData({
        isShowBackHomeIcon: isShowBackHomeIcon
      });
      var currPath = this.pageinstance.privateProperties.accessUri;
      currPath = currPath.replace(/([\?|\=|\&])/g, function ($0) {
        return '\\' + $0;
      });
      this.switchFunc = this.switchBar();
      E.onMessage('switchNav', this.switchFunc);
      Page.after({
        url: new RegExp(currPath),
        methods: {
          onPageScroll: function onPageScroll(context) {
            var scrollTop = context.args.e.scrollTop;
            E.fireMessage({
              type: 'switchNav',
              scrollTop: scrollTop
            });
          }
        }
      });
    },
    detached: function detached() {
      E.delHandler('switchNav', this.switchFunc);
    }
  },
  pageLifetimes: {
    show: function show() {
      E.onMessage('switchNav', this.switchFunc);
    },
    hide: function hide() {
      E.delHandler('switchNav', this.switchFunc);
    }
  },
  methods: {
    switchBar: function switchBar() {
      var _this = this;

      return function (params) {
        var _this$data = _this.data,
            commonBgColor = _this$data.commonBgColor,
            commonFrontColor = _this$data.commonFrontColor,
            fixedBgColor = _this$data.fixedBgColor,
            fixedFrontColor = _this$data.fixedFrontColor,
            showFixedBar = _this$data.showFixedBar,
            animation = _this$data.animation,
            switchStartPosition = _this$data.switchStartPosition,
            switchEndPosition = _this$data.switchEndPosition;
        var needSetting = commonFrontColor !== fixedFrontColor || fixedBgColor !== commonBgColor;

        if (showFixedBar) {
          var scrollTop = params.scrollTop;
          var fixedOpacity = 0;

          if (scrollTop > switchStartPosition) {
            needSetting && swan.setNavigationBarColor({
              frontColor: fixedFrontColor,
              backgroundColor: fixedBgColor
            });
            !_this.data.hideCommonBar && _this.setData({
              hideCommonBar: true
            });

            if (animation) {
              if (scrollTop <= switchEndPosition) {
                fixedOpacity = scrollTop / switchEndPosition;
              } else {
                fixedOpacity = 1;
              }
            } else {
              fixedOpacity = 1;
            }

            fixedOpacity && _this.setData({
              fixedOpacity: fixedOpacity
            });
          } else {
            needSetting && swan.setNavigationBarColor({
              frontColor: commonFrontColor,
              backgroundColor: commonBgColor
            });
            _this.data.hideCommonBar && _this.setData({
              hideCommonBar: false
            });
            fixedOpacity = 0;
            !fixedOpacity && _this.setData({
              fixedOpacity: fixedOpacity
            });
          }
        }
      };
    },
    goToBack: function goToBack() {
      var _this$data2 = this.data,
          returnPath = _this$data2.returnPath,
          customNavBack = _this$data2.customNavBack,
          isShowBackHomeIcon = _this$data2.isShowBackHomeIcon;

      if (isShowBackHomeIcon) {
        swan[this.data.navType]({
          url: this.data.returnPath
        });
        return;
      }

      if (customNavBack) {
        this.triggerEvent('navback');
        return;
      }

      if (returnPath) {
        swan.navigateTo({
          url: returnPath
        });
      } else {
        swan.navigateBack({
          success: function success() {
            console.log('navigateBack success');
          },
          fail: function fail(err) {
            console.log('navigateBack fail', err);
          }
        });
      }
    }
  }
});