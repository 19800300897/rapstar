/**
 * @file CheckBoxGroup
 * @author Huangzilong (huangzilong@baidu.com)
 * @desc 多选组件
 */

import {isIos} from '../../common/utils/index';
import {
    COLOR_TIPS_RED,
    COLOR_RED_LIGHT
} from '../../common/style/color';

Component({
    externalClasses: [
        'gov-checkbox-group'
    ],
    properties: {
        options: {
            type: Array,
            value: [],
            observer: function () {
                this.createCheckGroup();
            }
        },
        column: {
            type: Number,
            value: 3,
            observer: function () {
                this.createCheckGroup();
            }
        },
        inline: {
            type: Boolean,
            value: true
        },
        optionKey: {
            type: String,
            value: 'name'
        },
        value: {
            type: Array,
            value: [],
            observer: function () {
                this.createCheckGroup();
            }
        },
        groupStyle: {
            type: String,
            value: ''
        },
        itemStyle: {
            type: String,
            value: ''
        },
        rowStyle: {
            type: String,
            value: ''
        },
        rowItemStyle: {
            type: String,
            value: ''
        },
        iconStyle: {
            type: String,
            value: ''
        },
        noLastBorder: {
            type: Boolean,
            value: true
        },
        inFilter: {
            type: Boolean,
            value: false
        },
        enhanceChange: {
            type: Boolean,
            value: false
        },
        activeColor: {
            type: String,
            value: COLOR_TIPS_RED
        },
        activeInlineBgColor: {
            type: String,
            value: COLOR_RED_LIGHT
        }
    },
    data: {
        currOptions: [],
        currRowOptions: [],
        isIos
    },
    created() {
        this.createCheckGroup();
    },
    itemChange({detail: checked, currentTarget}) {
        let info = currentTarget.dataset.info;

        let value = this.data.value;
        let index = this.data.inline
            ? info.index * this.data.column * info.idx
            : info.idx;
        const idx = value.indexOf(index);

        if (checked) {
            idx === -1 && value.push(index);
        }
        else {
            idx > -1 && value.splice(idx, 1);
        }

        let val = this.data.enhanceChange ? {checked, index, disabled: false, value} : value;

        this.setData({
            value: val
        });
        this.triggerEvent('change', val);
    },
    clkHdl(e) {
        let info = e.currentTarget.dataset.info;
        let checked = e.detail.checked;
        this.triggerEvent('click', {...info, checked});
    },
    createCheckGroup() {
        const {options, value} = this.data;

        let currOptions;
        if (typeof options[0] !== 'object') {
            currOptions = options.map((e, idx) =>
                ({name: e, checked: (value || []).includes(idx)})
            );
        }
        else {
            currOptions = options.map((e, idx) => ({...e, checked: (value || []).includes(idx)}));
        }

        let currRowOptions = [];

        currOptions.forEach((e, i) => {
            !(i % this.data.column) && currRowOptions.push([]);
            const last = currRowOptions.length - 1;
            currRowOptions[last].push(e);
        });

        this.setData({
            currOptions,
            currRowOptions
        });
    }
});
