/**
 * @file form.js
 * @author LipengJia (jialipeng@baidu.com)
 * @desc 和rd对齐的字段规则
 */

export const rawPattern = {
    // 特殊字符校验
    REGULAR_TEST: /[`~!@#$%^&*()_\-+=<>?:"{}|,.\/;'\\[\]·~！@#￥%……&*（）——\-+={}|《》？：“”【】、；‘'，。、]/,
    // 舱单总提运单号效验
    totalBillOfLadingRegular: /^[@]{0,1}([A-Z0-9]+[_*\/]{0,1}[A-Z0-9]+){0,1}([A-Z0-9]+){0,1}$/,
    // 非空校验
    noEmpty: /[^\s]/,
    // 汉字验证
    chineseCharacterRegular: /[\u4e00-\u9fa5]/,
    // 英文、数字
    englishNumberRegularity: /[A-Za-z0-9]{18}/,
    // 手机
    mobile: /^[1][3,4,5,6,7,8,9][0-9]{9}$/,
    // 固话
    landline: /^\d{7,11}$/,
    // 电话号
    phone: /^\d{7,11}$|^1[3,4,5,6,7,8,9][0-9]{9}$/,
    // 存折号
    passBookNo: /^[^(\u4e00-\u9fa5)]+$/,
    /* eslint-disable max-len */
    // 身份证
    idCard: /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$|^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9Xx])$/,
    /* eslint-enable max-len */
    // 邮箱
    email: /^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,})$/,
    // 邮编
    zipCode: /^\d{6}$/,
    // 证书编号
    certificateCode: /^\d{13}$/,
    // 追溯码
    traceBackTo: /^[0-9]{20,20}$/,
    // 统一社会信用代码
    credit: /^[0-9A-Z]{15,18}$/,
    // 燃气报装电话
    gasPhone: /^[1][3,4,5,6,7,8,9][0-9]{9}$|^([0-9]{3,4}-)?[0-9]{7,8}$/,
    // 用气需求整数
    gasInteger: /^\d+$/,
    // 用气需求小数
    gasDecimal: /^\d+$|^\d*\.\d+$/
};

/**
 * 身份证号校验
 * @param {String} value
 * @return {boolean} 结果 true:身份证号是对的，false: 身份证号是错的
 */
export const isIdNumber = value => {
    let errInfo = ['请输入合法的身份证号'];
    if (!value) {
        return;
    }
    if (value.length !== 18) {
        return !(errInfo.length);
    }
    let factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
    let partial = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];
    let sum = 0;
    value.split('').slice(0, 17).forEach((e, idx) => {
        sum += value[idx] * factor[idx];
    });
    if (partial[sum % 11] !== value[17]) {
        return !(errInfo.length);
    }
    return !([].length);
};

/**
 * 姓名校验
 * @param {String} xm
 * @return {Object} 结果 iptErrorInfo
 */
export const checkXm = xm => {
    let checkResult = /(^[a-zA-Z\s·]{1,}$)|(^[\u2E80-\uFE4F]{2,20}(?:·[\u2E80-\uFE4F]{1,20})*$)/.test(xm);
    if (!checkResult) {
        return {
            errFlag: true,
            errContent: '请输入正确姓名'
        };
    }
    return {
        errFlag: false,
        errContent: ''
    };
};

/**
 * 空校验
 * @param {String} value 输入
 * @return {Boolean} nonEmpty 非空ture，空false
 */
export const validEmpty = value => /[^\s]/.test(value);

/**
 * 身份证号校验
 * @param {String} sfzh
 * @return {Object} 结果
 */
export const checkSfzh = sfzh => {
    if (!sfzh) {
        return {
            errFlag: false,
            errContent: ''
        };
    }
    /* eslint-disable max-len */
    let checkResult = /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$|^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9Xx])$/.test(sfzh);
    /* eslint-disable max-len */
    if (!checkResult) {
        return {
            errFlag: true,
            errContent: '请输入正确的18位身份证号'
        };
    }
    return {
        errFlag: false,
        errContent: ''
    };
};

/**
 * 校验全为中文且至少有chineseNum个中文
 *
 * @param {string} str 检验的字符串
 * @param {string} chineseNum 中文的个数
 * @return {boolean} 校验结果 返回true代表检验成功 false代表校验失败
 */
export const checkChineseReg = (str, chineseNum) => {
    // 中文正则
    const reg = new RegExp(`^[\u4e00-\u9fa5]{${chineseNum},}$`, 'i');
    return reg.test(str);
};

/**
 * 证书编号校验
 * @param {String} zsbh
 * @return {Object} 结果
 */
export const checkZsbh = (zsbh, length = 0, errText = '填写有误') => {
    let checkResult = /^[A-Za-z0-9]+$/.test(zsbh) && zsbh.length >= length;
    if (!checkResult) {
        return {
            errFlag: true,
            errContent: errText
        };
    }
    return {
        errFlag: false,
        errContent: ''
    };
};

/**
 * 准考证号校验
 * @param {String}
 * @return {Object} 结果
 */
export const checkZkzh = (zkzh, length = 14, errText = '填写有误') => {
    let checkResult = /^[A-Za-z0-9]+$/.test(zkzh) && zkzh.length >= length;
    if (!checkResult) {
        return {
            errFlag: true,
            errContent: errText
        };
    }
    return {
        errFlag: false,
        errContent: ''
    };
};

export const methods = {
    isPhone(phone, type = 'mobile') {
        if (!['mobile', 'landline', 'phone'].includes(type)) {
            throw 'type只能为mobile、landline、phone';
        }
        return rawPattern[type].test(phone);
    },
    isEmail(email) {
        return rawPattern.email.test(email);
    },

    isZipCode(zipCode) {
        return rawPattern.zipCode.test(zipCode);
    }
};
