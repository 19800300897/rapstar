"use strict";

var _color = require("../../common/style/color");

/**
 * @file 评分组件
 * @author swan
 */

/* globals Page, swan, getApp */
// 颜色
// 评分文案
var defaultTextArr = ['非常差', '差', '一般', '好', '非常好']; // 星星类型（图标、颜色）

var starType = {
  zero: {
    icon: 'star-o',
    color: _color.COLOR_GRAY_4
  },
  half: {
    icon: 'star-half',
    color: _color.COLOR_RED
  },
  full: {
    icon: 'star',
    color: _color.COLOR_RED
  }
};
Component({
  externalClasses: ['gov-rate', 'gov-rate-text'],
  properties: {
    // 星星总量
    count: {
      type: Number,
      value: 5,
      observer: function observer() {
        this.initCount();
      }
    },
    // 当前点亮星星数量
    value: {
      type: Number,
      value: 0,
      observer: function observer(newVal, oldVal) {
        this.countStar(newVal);
      }
    },
    // icon配置
    icon: {
      type: Object,
      value: {
        size: '24px'
      }
    },
    // 是否禁用
    disabled: {
      type: Boolean,
      value: false
    },
    // 自定义右侧文案
    text: {
      type: String,
      value: '',
      observer: function observer(newVal, oldVal) {
        this.setData({
          oText: newVal
        });
      }
    },
    // 是否展示右侧文案
    showText: {
      type: Boolean,
      value: true
    },
    // 自定义每项的提示信息 string[]
    textArr: {
      type: Array,
      value: defaultTextArr,
      observer: function observer(newVal, oldVal) {
        // 如果自定义提示信息长度与星星总量不一致，则采用默认方式
        if (this.data.count !== newVal.length) {
          this.data.textArr = defaultTextArr;
        }
      }
    }
  },
  data: {
    countNum: [],
    status: 'zero',
    // zero / half / full
    oText: '',
    oldVal: 0
  },
  methods: {
    /**
     * 初始化
     */
    initCount: function initCount() {
      this.countStar(this.data.value);
    },

    /**
     * 整数部分
     *
     * @param {Number} num 星星数量
     * @return {Number}
     */
    numIntegerPart: function numIntegerPart(num) {
      return ~~num;
    },

    /**
     * 小数部分
     *
     * @param {Number} num 星星数量
     * @return {Number}
     */
    numDecimalPart: function numDecimalPart(num) {
      // ~~的作用是去掉小数部分
      return Number(num - ~~num === 0.5);
    },

    /**
     * 计算
     *
     * @param {Number} num 星星数量
     */
    countStar: function countStar(num) {
      // 整星
      var fullCount = this.numIntegerPart(num); // 半星

      var halfCount = this.numDecimalPart(num);
      var currStatus = 'zero';
      var len = this.data.count;

      for (var i = 0; i < len; i++) {
        this.data.countNum[i] = {};

        if (i <= fullCount - 1) {
          currStatus = 'full';
        } else if (halfCount) {
          // 小数只会有一个 添加后不再添加
          halfCount = 0;
          currStatus = 'half';
        } else {
          currStatus = 'zero';
        }

        this.data.countNum[i].status = currStatus;
        this.data.countNum[i].icon = starType[currStatus].icon;
        this.data.countNum[i].color = this.data.icon.color || starType[currStatus].color;
      } // 对应文案 (无星无文案)


      var oText = this.data.text;

      if (num > 0) {
        // 如果无自定义文案，则采用textArr中对应文案
        if (oText === '') {
          oText = this.data.textArr[fullCount ? fullCount - 1 : 0];
        }
      } else {
        oText = '';
      }

      this.setData({
        countNum: this.data.countNum,
        oText: oText
      }); // 更新视图后，num则变为oldVal

      this.data.oldVal = num;
    },

    /**
     * 点击评分
     *
     * @param {Object} e 事件对象
     */
    onChangeSelf: function onChangeSelf(e) {
      if (this.data.disabled) {
        return;
      }

      var index = e.currentTarget.dataset.index;
      var newVal = index + 1;
      var oldVal = this.data.oldVal;
      var detailData = {
        newVal: newVal,
        oldVal: oldVal
      };
      this.countStar(newVal);
      this.triggerEvent('change', detailData);
    }
  },
  created: function created() {
    this.initCount();
  }
});