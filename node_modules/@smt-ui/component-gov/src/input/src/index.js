/**
 * @file 输入框组件
 * @author huangzilong(huangzilong@baidu.com)
 */

import {isIos} from '../../common/utils/index';

Component({
    externalClasses: [
        'gov-input'
    ],
    properties: {
        // 定义了name属性，可以在使用组件时，由外部传入。此变量可以直接在组件模板中使用
        iptItemType: { // 整个输入块的类型：'long':普通长(六字标题) 'short':普通短(四字标题) 'two-row' 双行
            type: String,
            value: 'long'
        },
        iptAreaWidth: { // 输入区域的宽度
            type: Number,
            value: 390 // 360,430
        },
        iptAreaShort: { // 短标题输入区域的宽度
            type: Number,
            value: 460
        },
        iptAreaLong: { // 长标题输入区域的宽度
            type: Number,
            value: 390
        },
        iptName: { // 输入框名字
            type: String,
            value: ''
        },
        iptTitle: { // 标题
            type: String,
            value: ''
        },
        placeholderContent: { // 占位文案
            type: String,
            value: '请输入'
        },
        type: { // input类型：text、number、idcard、digit
            type: String,
            value: 'text'
        },
        password: { // 是否是密码类型
            type: Boolean,
            value: false
        },
        maxlength: { // 输入最大长度
            type: Number,
            value: 140
        },
        focus: { // 获取聚焦，调起键盘
            type: Boolean,
            value: false
        },
        disabled: { // 是否禁用
            type: Boolean,
            value: false
        },
        confirmType: { // 键盘右下角按钮 send:发送 search:搜索 next:下一个 go:前往 done:完成
            type: String,
            value: 'done'
        },
        noborder: {
            type: Boolean,
            value: false
        },
        iptNoticInfo: { // 控制输入块后面的notic图标
            type: Object,
            value: {
                noticFlag: false,
                noticType: 'toast', // 'toast'或'modal'
                noticToast: { // toast 文案
                    toastTitle: 'toast的一些个文案～',
                    toastIcon: 'none'
                },
                noticModal: {
                    modalTitle: '标题',
                    modalContent: 'modal的一些个文案！'
                }
            }
        },
        iptErrorInfo: {
            type: Object,
            value: {
                errflag: false,
                errContent: ''
            }
        },
        iptValue: {
            type: String,
            value: ''
        }
    },
    data: {
        blurState: true,
        isIos
    },
    // 控制clean、blur事件的执行顺序
    eventHandle: [],
    attached() {
        // 初始状态 通过设置的focus属性来判断blurState状态
        this.setData('blurState', !this.data.focus);
    },
    methods: {
        // 清空键盘事件
        cleanInput() {
            // 向队列中push一个function,保证clear事件可以在失焦事件后执行
            this.eventHandle.push(() => {
                this.setData({
                    iptValue: '',
                    blurState: false,
                    focus: true
                });
                let iptname = this.data.iptName || '';
                let iptid = this.data.id || '';
                let iptResult = {
                    iptid,
                    iptname,
                    iptvalue: ''
                };
                this.triggerEvent('iptclean', iptResult);
            });
        },
        // 监听输入事件
        bindKeyInput(e) {
            this.setData({
                iptValue: e.detail.value
            }, () => {
                let iptname = this.data.iptName || '';
                let iptid = this.data.id || '';
                let iptResult = {
                    iptid,
                    iptname,
                    iptvalue: e.detail.value
                };

                this.triggerEvent('keyinput', iptResult);
            });
        },
        // 失焦事件
        bindBlur(e) {
            this.setData({
                focus: false,
                blurState: true
            });
            let iptname = this.data.iptName || '';
            let iptid = this.data.id || '';
            let iptResult = {
                iptid,
                iptname,
                iptvalue: e.detail.value
            };

            this.triggerEvent('iptblur', iptResult);

            // 若队列中存在内容，将在此执行队列中的function
            // 使用setTimeout原因：vivo nexA 安卓9 input填写内容后的清空按钮点第一次点击无法清空内容
            if (this.eventHandle.length > 0) {
                setTimeout(() => {
                    this.eventHandle.forEach(callBack => {
                        callBack();
                    });
                    this.eventHandle = [];
                });
            }
        },
        // 输入框聚焦事件
        bindFocus(e) {
            this.setData({
                iptErrorInfo: {
                    errFlag: false,
                    errContent: ''
                },
                blurState: false
            });
            let iptid = this.data.id || '';
            let iptResult = {
                iptid,
                iptValue: e.detail.value
            };
            this.triggerEvent('iptfocus', iptResult);
        },
        bindConfirm() {
            this.triggerEvent('iptconfirm');
        },
        showNotic() {
            let noticType = this.data.iptNoticInfo.noticType;
            let noticToast = this.data.iptNoticInfo.noticToast;
            let noticModal = this.data.iptNoticInfo.noticModal;
            if (noticType === 'toast') {
                swan.showToast({
                    title: noticToast.toastTitle,
                    icon: noticToast.toastIcon
                });
            }
            else {
                swan.showModal({
                    title: noticModal.modalTitle,
                    content: noticModal.modalContent,
                    confirmText: '我知道了',
                    showCancel: false
                });
            }
        },
        showErrorInfo() {
            swan.showToast({
                title: this.data.iptErrorInfo.errContent,
                icon: 'none'
            });
        }
    }
});
