/**
 * @file 自定义沉浸式顶栏
 * @author swan
 */
/* global Page, swan, getApp, getCurrentPages, navigateBack */
import EventsEmitter from '@smt-lib/observer';
import {isIos, systemInfo} from '../../common/utils/index';
const {statusBarHeight, navigationBarHeight}  = systemInfo;
const E = new EventsEmitter();
const COLOR = {
    BLACK: '#000000',
    WHITE: '#ffffff'
};
Component({
    externalClasses: [
        'gov-page-title',
        'gov-fixed-nav-bar',
        'gov-opacity-nav-bar',
        'gov-title-area-bar'
    ],
    properties: {
        // 普通导航栏是否为透明且不占高度，默认透明，如否需要传入普通导航栏的背景色commonBgColor
        commonBgOpacity: {
            type: Boolean,
            value: true
        },
        // 普通导航栏页面标题
        commonTitle: {
            type: String,
            value: ''
        },
        // 普通导航栏标题显示类型
        commonTextAlign: {
            type: String,
            value: 'center'
        },
        // 普通导航栏的背景色
        commonBgColor: {
            type: String,
            value: ''
        },
        // 普通导航栏上内容的颜色，对标swan.setNavigationBarColor中的frontColor设置规则，仅支持黑白两种，默认白色
        commonFrontColor: {
            type: String,
            value: COLOR.WHITE
        },
        // 普通导航栏是否有下边框
        commonHasBorder: {
            type: Boolean,
            value: false
        },
        // 是否需要滚动后切换导航栏
        showFixedBar: {
            type: Boolean,
            value: true
        },
        // 切换导航栏起始位置，默认状态栏的高度
        switchStartPosition: {
            type: Number,
            value: statusBarHeight
        },
        // 切换导航栏终止位置，需animation为true时使用才有效果
        switchEndPosition: {
            type: Number,
            value: '100px'
        },
        // 固定导航栏页面标题
        fixedTitle: {
            type: String,
            value: ''
        },
        // 固定导航栏标题显示类型
        fixedTextAlign: {
            type: String,
            value: 'center'
        },
        // 固定导航栏的背景色
        fixedBgColor: {
            type: String,
            value: COLOR.WHITE
        },
        // 固定导航栏上内容的颜色，对标swan.setNavigationBarColor中的frontColor设置规则，仅支持黑白两种，默认黑色
        fixedFrontColor: {
            type: String,
            value: COLOR.BLACK
        },
        // 固定导航栏是否有下边框
        fixedHasBorder: {
            type: Boolean,
            value: false
        },
        // 页面滚动时出现导航栏是否需要渐显动画，默认展示动画
        animation: {
            type: Boolean,
            value: true
        },
        // 是否需要返回按钮
        needToReturn: {
            type: Boolean,
            value: false
        },
        // 返回路径，默认为空即返回上一页
        returnPath: {
            type: String,
            value: ''
        },
        // 返回按钮是否需要自定义事件
        customNavBack: {
            type: Boolean,
            value: false
        },
        // 点击房子icon时的返回方式
        navType: {
            type: String,
            value: 'navigateTo'
        }
    },
    data: {
        navigationBarHeight,
        statusBarHeight,
        isIos,
        fixedOpacity: 0,
        hideCommonBar: false,
        isShowBackHomeIcon: false
    },
    lifetimes: {
        ready() {
            let isShowBackHomeIcon = getCurrentPages().length === 1;
            this.setData({
                isShowBackHomeIcon
            });
            let currPath = this.pageinstance.privateProperties.accessUri;
            currPath = currPath.replace(/([\?|\=|\&])/g, $0 => '\\' + $0);
            this.switchFunc = this.switchBar();
            E.onMessage('switchNav', this.switchFunc);

            Page.after({
                url: new RegExp(currPath),
                methods: {
                    onPageScroll(context) {
                        let scrollTop = context.args.e.scrollTop;
                        E.fireMessage({
                            type: 'switchNav',
                            scrollTop
                        });
                    }
                }
            });
        },
        detached() {
            E.delHandler('switchNav', this.switchFunc);
        }
    },
    pageLifetimes: {
        show() {
            E.onMessage('switchNav', this.switchFunc);
        },
        hide() {
            E.delHandler('switchNav', this.switchFunc);
        }
    },
    methods: {
        switchBar() {
            return params => {
                let {
                    commonBgColor,
                    commonFrontColor,
                    fixedBgColor,
                    fixedFrontColor,
                    showFixedBar,
                    animation,
                    switchStartPosition,
                    switchEndPosition
                } = this.data;
                let needSetting = (commonFrontColor !== fixedFrontColor) || (fixedBgColor !== commonBgColor);
                if (showFixedBar) {
                    let scrollTop = params.scrollTop;
                    let fixedOpacity = 0;
                    if (scrollTop > switchStartPosition) {
                        needSetting && swan.setNavigationBarColor({
                            frontColor: fixedFrontColor,
                            backgroundColor: fixedBgColor
                        });
                        !this.data.hideCommonBar && this.setData({
                            hideCommonBar: true
                        });
                        if (animation) {
                            if (scrollTop <= switchEndPosition) {
                                fixedOpacity = scrollTop / switchEndPosition;
                            }
                            else {
                                fixedOpacity = 1;
                            }
                        }
                        else {
                            fixedOpacity = 1;
                        }

                        fixedOpacity && this.setData({
                            fixedOpacity
                        });
                    }
                    else {
                        needSetting && swan.setNavigationBarColor({
                            frontColor: commonFrontColor,
                            backgroundColor: commonBgColor
                        });
                        this.data.hideCommonBar && this.setData({
                            hideCommonBar: false
                        });
                        fixedOpacity = 0;

                        !fixedOpacity && this.setData({
                            fixedOpacity
                        });
                    }
                }
            };
        },
        goToBack() {
            let {returnPath, customNavBack, isShowBackHomeIcon} = this.data;
            if (isShowBackHomeIcon) {
                swan[this.data.navType]({
                    url: this.data.returnPath
                });
                return;
            }
            if (customNavBack) {
                this.triggerEvent('navback');
                return;
            }

            if (returnPath) {
                swan.navigateTo({
                    url: returnPath
                });
            }
            else {
                swan.navigateBack({
                    success: () => {
                        console.log('navigateBack success');
                    },
                    fail: err => {
                        console.log('navigateBack fail', err);
                    }
                });
            }
        }
    }
});
