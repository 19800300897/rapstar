"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _index = require("../../common/utils/index");

var _color = require("../../common/style/color");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Component({
  externalClasses: ['gov-radio-group'],
  properties: {
    options: {
      type: Array,
      value: [],
      observer: function observer() {
        this.initRadioGroup();
      }
    },
    column: {
      type: Number,
      value: 2
    },
    inline: {
      type: Boolean,
      value: true
    },
    noLastBorder: {
      type: Boolean,
      value: true
    },
    optionKey: {
      type: String,
      value: ''
    },
    border: {
      type: Boolean,
      value: false
    },
    value: {
      type: Array,
      value: [],
      observer: function observer() {
        this.initRadioGroup();
      }
    },

    /**
     * 单选组wrap style
     */
    groupStyle: {
      type: String,
      value: ''
    },

    /**
     * 单选框 style
     */
    itemStyle: {
      type: String,
      value: ''
    },

    /**
     * 单选组一行 style
     */
    rowStyle: {
      type: String,
      value: ''
    },
    tick: {
      type: Boolean,
      value: false
    },

    /**
     * 是否用于筛选器，有样式diff
     */
    inFilter: {
      type: Boolean,
      value: false
    },

    /**
     * 筛选新增交互: 单选不带入可取消选择
     */
    cancelable: {
      type: Boolean,
      value: false
    },
    activeColor: {
      type: String,
      value: _color.COLOR_TIPS_RED
    },
    activeInlineBgColor: {
      type: String,
      value: _color.COLOR_RED_LIGHT
    }
  },
  data: {
    // 单独、inline、list 样式不一样
    listTextGap: '30.797rpx',
    currOptions: [],
    currRowOptions: [],
    isIos: _index.isIos
  },
  created: function created() {
    this.initRadioGroup();
  },
  methods: {
    itemChange: function itemChange(_ref) {
      var checked = _ref.detail,
          currentTarget = _ref.currentTarget;
      var info = currentTarget.dataset.info;
      var index = info.idx;

      if (this.data.inline) {
        index = info.index * this.data.column + info.idx;
      }

      var value = '';

      if (this.data.cancelable && !checked) {
        value = this.data.value = '';
      } else {
        value = this.data.value = index;
      }

      this.setData({
        value: value
      });
      this.triggerEvent('change', value);
    },
    clkHdl: function clkHdl(e) {
      var payload = {};
      var info = e.currentTarget.dataset.info;

      if (this.data.inline) {
        payload = {
          index: info.index * this.data.column + info.idx,
          disabled: info.disabled,
          desc: info.desc
        };
      } else {
        payload = {
          index: info.idx,
          disabled: info.disabled,
          desc: info.desc
        };
      }

      this.setData({
        value: payload.index
      });
      this.triggerEvent('click', payload);
    },
    initRadioGroup: function initRadioGroup() {
      var _this = this;

      var _this$data = this.data,
          options = _this$data.options,
          value = _this$data.value;
      var currOptions;

      if ((0, _typeof2["default"])(options[0]) !== 'object') {
        currOptions = this.data.options.map(function (e, idx) {
          return {
            name: e,
            checked: idx === value
          };
        });
      } else {
        currOptions = this.data.options.map(function (e, idx) {
          return _objectSpread(_objectSpread({}, e), {}, {
            checked: idx === value
          });
        });
      }

      var currRowOptions = [];
      currOptions.forEach(function (e, i) {
        !(i % _this.data.column) && currRowOptions.push([]);
        var last = currRowOptions.length - 1;
        currRowOptions[last].push(e);
      });
      this.setData({
        currOptions: currOptions,
        currRowOptions: currRowOptions
      });
    }
  }
});