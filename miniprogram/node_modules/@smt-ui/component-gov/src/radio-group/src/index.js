import {isIos} from '../../common/utils/index';
import {COLOR_TIPS_RED, COLOR_RED_LIGHT} from '../../common/style/color';

Component({
    externalClasses: [
        'gov-radio-group'
    ],
    properties: {
        options: {
            type: Array,
            value: [],
            observer: function () {
                this.initRadioGroup();
            }
        },
        column: {
            type: Number,
            value: 2
        },
        inline: {
            type: Boolean,
            value: true
        },
        noLastBorder: {
            type: Boolean,
            value: true
        },
        optionKey: {
            type: String,
            value: ''
        },
        border: {
            type: Boolean,
            value: false
        },
        value: {
            type: Array,
            value: [],
            observer: function () {
                this.initRadioGroup();
            }
        },
        /**
         * 单选组wrap style
         */
        groupStyle: {
            type: String,
            value: ''
        },
        /**
         * 单选框 style
         */
        itemStyle: {
            type: String,
            value: ''
        },
        /**
         * 单选组一行 style
         */
        rowStyle: {
            type: String,
            value: ''
        },

        tick: {
            type: Boolean,
            value: false
        },

        /**
         * 是否用于筛选器，有样式diff
         */
        inFilter: {
            type: Boolean,
            value: false
        },

        /**
         * 筛选新增交互: 单选不带入可取消选择
         */
        cancelable: {
            type: Boolean,
            value: false
        },
        activeColor: {
            type: String,
            value: COLOR_TIPS_RED
        },
        activeInlineBgColor: {
            type: String,
            value: COLOR_RED_LIGHT
        }
    },
    data: {
        // 单独、inline、list 样式不一样
        listTextGap: '30.797rpx',
        currOptions: [],
        currRowOptions: [],
        isIos
    },
    created() {
        this.initRadioGroup();
    },
    methods: {
        itemChange({detail: checked, currentTarget}) {
            let info = currentTarget.dataset.info;
            let index = info.idx;

            if (this.data.inline) {
                index = info.index * this.data.column + info.idx;
            }

            let value = '';
            if (this.data.cancelable && !checked) {
                value = this.data.value = '';
            }
            else {
                value = this.data.value = index;
            }

            this.setData({
                value
            });

            this.triggerEvent('change', value);
        },

        clkHdl(e) {
            let payload = {};
            let info = e.currentTarget.dataset.info;

            if (this.data.inline) {
                payload = {
                    index: info.index * this.data.column + info.idx,
                    disabled: info.disabled,
                    desc: info.desc
                };
            }
            else {
                payload = {
                    index: info.idx,
                    disabled: info.disabled,
                    desc: info.desc
                };
            }

            this.setData({
                value: payload.index
            });
            this.triggerEvent('click', payload);
        },
        initRadioGroup() {
            const {options, value} = this.data;

            let currOptions;
            if (typeof options[0] !== 'object') {
                currOptions = this.data.options.map((e, idx) =>
                    ({name: e, checked: idx === value})
                );
            }
            else {
                currOptions = this.data.options.map((e, idx) => ({...e, checked: idx === value}));
            }

            const currRowOptions = [];
            currOptions.forEach((e, i) => {
                !(i % this.data.column) && currRowOptions.push([]);
                const last = currRowOptions.length - 1;
                currRowOptions[last].push(e);
            });

            this.setData({
                currOptions,
                currRowOptions
            });
        }
    }
});
