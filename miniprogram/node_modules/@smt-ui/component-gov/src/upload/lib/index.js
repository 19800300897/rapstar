"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

/**
 * @file index.js
 * @author swan
 * @date 2020-02-27
 */
Component({
  externalClasses: ['gov-upload-box', 'gov-img', 'gov-delete', 'gov-tips', 'gov-upload-inline-box', 'gov-upload-word', 'gov-inline-img', 'gov-inline-delete'],
  properties: {
    imageList: {
      type: Array,
      value: []
    },
    count: {
      type: Number,
      value: 6
    },
    tips: {
      type: String,
      value: ''
    },
    border: {
      type: Boolean,
      value: false
    },
    sizeType: {
      type: Array,
      value: ['compressed']
    },
    sourceType: {
      type: Array,
      value: ['album', 'camera']
    },
    imgMode: {
      type: String,
      value: 'aspectFill'
    },
    inline: {
      type: Boolean,
      value: false
    },
    url: {
      type: String,
      value: ''
    },
    name: {
      type: String,
      value: 'file'
    },
    header: {
      type: Object,
      value: {
        'content-type': 'application/json'
      }
    },
    formData: {
      type: Object,
      value: {
        'user': 'swan'
      }
    },
    limitSize: {
      type: Number
    },
    showSizeToast: {
      type: Boolean,
      value: false
    }
  },

  /**
   * 点击上传图片
   */
  clickUp: function clickUp() {
    var _this = this;

    var _this$data = this.data,
        imageList = _this$data.imageList,
        count = _this$data.count,
        sizeType = _this$data.sizeType,
        sourceType = _this$data.sourceType,
        inline = _this$data.inline,
        url = _this$data.url,
        limitSize = _this$data.limitSize,
        showSizeToast = _this$data.showSizeToast;
    var urlType = typeof url === 'string';
    swan.chooseImage({
      count: inline ? 1 : count - imageList.length,
      sizeType: sizeType,
      sourceType: sourceType,
      success: function success(res) {
        for (var i = 0; i < res.tempFiles.length; i++) {
          if (limitSize) {
            if (res.tempFiles[i].size < limitSize * 1024 * 1024) {
              imageList.push.apply(imageList, (0, _toConsumableArray2["default"])(res.tempFiles));

              if (!url || !urlType) {
                return _this.triggerEvent('urlempty', imageList);
              }

              _this.upLoad(res, i);
            } else {
              if (!showSizeToast) {
                swan.showToast({
                  title: "\u8BF7\u4E0A\u4F20\u5927\u5C0F".concat(limitSize, "M\u4EE5\u5185\u7684\u56FE\u7247"),
                  icon: 'none'
                });
              }

              _this.triggerEvent('limitsizeerr');

              return;
            }
          } else {
            if (!url || !urlType) {
              return _this.triggerEvent('noturl', imageList);
            }

            _this.upLoad(res, i);
          }
        }
      },
      fail: function fail(err) {
        _this.triggerEvent('chooserr', err);
      }
    });
  },

  /**
   * 上传图片
   *
   * @param {Object} res 选择图片的返回
   * @param {Number} i 图片张数的循环
   */
  upLoad: function upLoad(res, i) {
    var _this2 = this;

    var _this$data2 = this.data,
        header = _this$data2.header,
        formData = _this$data2.formData,
        name = _this$data2.name,
        url = _this$data2.url;
    swan.showLoading({
      title: '上传中',
      mask: true
    });
    swan.uploadFile({
      url: url,
      filePath: res.tempFiles[i].path,
      // 要上传文件资源的路径
      name: name,
      header: header,
      formData: formData,
      success: function success(res) {
        if (res.statusCode === 200) {
          swan.hideLoading();

          _this2.triggerEvent('uploadsuccess', {
            res: res.data
          });
        } else {
          swan.hideLoading();
          return _this2.triggerEvent('reserror', {
            res: res.data
          });
        }
      },
      fail: function fail(err) {
        swan.hideLoading();

        _this2.triggerEvent('uploadfail', err);
      }
    });
  },

  /**
   * 预览图片
   */
  previewImage: function previewImage(e) {
    var _this3 = this;

    var index = e.currentTarget.dataset.index;
    swan.previewImage({
      current: this.data.imageList[index],
      urls: this.data.imageList,
      success: function success(res) {
        _this3.triggerEvent('previewsuccess', res);
      },
      fail: function fail(err) {
        _this3.triggerEvent('previewfail', err);
      }
    });
  },

  /**
   * 点击删除图片
   */
  clickDelete: function clickDelete(e) {
    var index = e.currentTarget.dataset.index;
    this.data.imageList.splice(index, 1);
    this.triggerEvent('delete', {
      path: this.data.imageList,
      index: index
    });
  }
});