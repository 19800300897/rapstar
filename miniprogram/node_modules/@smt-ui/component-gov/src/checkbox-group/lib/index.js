"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _index = require("../../common/utils/index");

var _color = require("../../common/style/color");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Component({
  externalClasses: ['gov-checkbox-group'],
  properties: {
    options: {
      type: Array,
      value: [],
      observer: function observer() {
        this.createCheckGroup();
      }
    },
    column: {
      type: Number,
      value: 3,
      observer: function observer() {
        this.createCheckGroup();
      }
    },
    inline: {
      type: Boolean,
      value: true
    },
    optionKey: {
      type: String,
      value: 'name'
    },
    value: {
      type: Array,
      value: [],
      observer: function observer() {
        this.createCheckGroup();
      }
    },
    groupStyle: {
      type: String,
      value: ''
    },
    itemStyle: {
      type: String,
      value: ''
    },
    rowStyle: {
      type: String,
      value: ''
    },
    rowItemStyle: {
      type: String,
      value: ''
    },
    iconStyle: {
      type: String,
      value: ''
    },
    noLastBorder: {
      type: Boolean,
      value: true
    },
    inFilter: {
      type: Boolean,
      value: false
    },
    enhanceChange: {
      type: Boolean,
      value: false
    },
    activeColor: {
      type: String,
      value: _color.COLOR_TIPS_RED
    },
    activeInlineBgColor: {
      type: String,
      value: _color.COLOR_RED_LIGHT
    }
  },
  data: {
    currOptions: [],
    currRowOptions: [],
    isIos: _index.isIos
  },
  created: function created() {
    this.createCheckGroup();
  },
  itemChange: function itemChange(_ref) {
    var checked = _ref.detail,
        currentTarget = _ref.currentTarget;
    var info = currentTarget.dataset.info;
    var value = this.data.value;
    var index = this.data.inline ? info.index * this.data.column * info.idx : info.idx;
    var idx = value.indexOf(index);

    if (checked) {
      idx === -1 && value.push(index);
    } else {
      idx > -1 && value.splice(idx, 1);
    }

    var val = this.data.enhanceChange ? {
      checked: checked,
      index: index,
      disabled: false,
      value: value
    } : value;
    this.setData({
      value: val
    });
    this.triggerEvent('change', val);
  },
  clkHdl: function clkHdl(e) {
    var info = e.currentTarget.dataset.info;
    var checked = e.detail.checked;
    this.triggerEvent('click', _objectSpread(_objectSpread({}, info), {}, {
      checked: checked
    }));
  },
  createCheckGroup: function createCheckGroup() {
    var _this = this;

    var _this$data = this.data,
        options = _this$data.options,
        value = _this$data.value;
    var currOptions;

    if ((0, _typeof2["default"])(options[0]) !== 'object') {
      currOptions = options.map(function (e, idx) {
        return {
          name: e,
          checked: (value || []).includes(idx)
        };
      });
    } else {
      currOptions = options.map(function (e, idx) {
        return _objectSpread(_objectSpread({}, e), {}, {
          checked: (value || []).includes(idx)
        });
      });
    }

    var currRowOptions = [];
    currOptions.forEach(function (e, i) {
      !(i % _this.data.column) && currRowOptions.push([]);
      var last = currRowOptions.length - 1;
      currRowOptions[last].push(e);
    });
    this.setData({
      currOptions: currOptions,
      currRowOptions: currRowOptions
    });
  }
});