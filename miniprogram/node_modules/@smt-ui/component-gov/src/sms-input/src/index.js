/**
 * @file 短信验证输入框组件
 * @author swan
 */

Component({
    externalClasses: [
        'gov-sms',
        'gov-sms-content',
        'gov-msg-code',
        'gov-msg-down',
        'gov-sms-ipt',
        'gov-sms-title'
    ],
    properties: {
        // 定义了name属性，可以在使用组件时，由外部传入。此变量可以直接在组件模板中使用
        iptTitle: {
            type: String,
            value: '验证码'
        },
        // 左侧文字宽度
        labelWidth: {
            type: String,
            value: '4em'
        },
        // 输入框名字
        iptName: {
            type: String,
            value: ''
        },
        // 占位文案
        placeholderContent: {
            type: String,
            value: '请输入验证码'
        },
        // 输入框value
        iptValue: {
            type: String,
            value: ''
        },
        // input类型：text、number、idcard、digit
        type: {
            type: String,
            value: 'text'
        },
        // 键盘右下角按钮 send:发送 search:搜索 next:下一个 go:前往 done:完成
        confirmType: {
            type: String,
            value: 'done'
        },
        // 输入最大长度
        maxlength: {
            type: Number,
            value: 10
        },
        // 获取聚焦，调起键盘
        focus: {
            type: Boolean,
            value: false
        },
        // 错误判断
        iptErrorFlag: {
            type: Boolean,
            value: false
        },
        // 错误判断的颜色
        iptErrorColor: {
            type: String,
            value: '#f00'
        },
        // input默认字体的颜色
        placeholderColor: {
            type: String,
            value: '#ccc'
        }
    },
    data: {
        getcodeFlag: true,
        msgCdTime: 60,
        cutTimer: null
    },
    methods: {
        // 当输入框输入时触发的事件
        bindKeyInput(e) {
            this.setData({
                iptValue: e.detail.value
            });
            let iptname = this.data.iptName || '';
            let iptResult = {
                iptname,
                iptvalue: e.detail.value
            };
            this.triggerEvent('keyinput', iptResult);
        },
        // 当输入框失焦时触发的事件
        bindBlur(e) {
            let iptname = this.data.iptName || '';
            let iptResult = {
                iptname,
                iptvalue: e.detail.value
            };
            this.triggerEvent('iptblur', iptResult);
        },
        // 当输入框聚焦时触发的事件
        bindFocus(e) {
            this.setData({
                iptErrorFlag: false
            });
            this.triggerEvent('iptfocus');
        },
        // 当键盘确认时触发的事件
        bindConfirm() {
            this.triggerEvent('iptconfirm');
        },
        // 当获取验证码时触发的事件
        getMsgCode() {
            let me = this;
            this.triggerEvent('smssend');
            this.setData({
                getcodeFlag: false
            });
            let t = setInterval(function () {
                let curTime = me.data.msgCdTime - 1;
                if (curTime < 0) {
                    clearInterval(t);
                    me.setData({
                        getcodeFlag: true,
                        msgCdTime: 60
                    });
                }
                else {
                    me.setData({
                        msgCdTime: curTime
                    });
                }
            }, 1000);
            this.setData({
                cutTimer: t
            });
        },
        // 清空定时器 在开发者提交表单成功之后必须手动清空定时器 具体用法: this.selectComponent('你的验证码的选择器').clearCountDown();
        clearCountDown() {
            this.setData({
                getcodeFlag: true,
                msgCdTime: 60
            });
            clearInterval(this.data.cutTimer);
        }
    },
    detached() {
        this.clearCountDown();
    }
});
