/**
 * @file filter-header组件
 * @author huangjing02
 */

/* globals Page, swan, getApp, getCurrentPages */
// import from '@smt-lib/observer'

import {events} from '../../common/utils/behavior';
import {isIos, getCurrentPage} from '../../common/utils/index';
import {COLOR_TIPS_RED, COLOR_RED_LIGHT, COLOR_BLACK, COLOR_GRAY_2} from '../../common/style/color';


Component({
    behaviors: [events],

    externalClasses: [
        'gov-filter-mask',
        'gov-filter-select-list',
        'gov-filter-content'
    ],

    properties: {
        // 筛选器ID
        filterId: {
            type: String,
            value: ''
        },

        // 筛选项数组，数组格式[{text:'名称', value: '值，string/Array.<string>', options: [{text: '', value: ''}, {text: '', value: ''}]}]
        selections: {
            type: Array,
            value: [],
            observer(n) {
                //  deep: true (不知道如何体现)
                this.setData('filtersValue', n.map(({text, value}) => ({text, value})));
            }
        },

        // 可重复点击选项 -- 例如需要实时刷新数据
        repeatable: {
            type: Boolean,
            value: true
        },

        // 高亮时的文字和icon颜色
        activeColor: {
            type: String,
            value: COLOR_TIPS_RED
        },
        // 复选在inline 模式选中时的选项背景颜色
        activeInlineBgColor: {
            type: String,
            value: COLOR_RED_LIGHT
        },
        // 默认状态的文字颜色
        fontColor: {
            type: String,
            value: COLOR_BLACK
        }
    },

    data: {
        // 当前选中的filter
        filterIdx: -1,

        // 对应filter的列表
        filtersValue: [], // [{text: '', value: ''}, {}]

        // 上一个激活的filter 索引
        lastActiveFilterIdx: -1,

        // 上一次选中的项
        lastSelItem: {},

        // 是否ios
        isIos,

        // 命名空间
        ns: ''
    },

    created() {
        if (!Array.isArray(this.data.selections)) {
            throw 'selections prop必须是数组';
        }
        // 初始化默认值
        this.setData({
            ns: `${getCurrentPage().uri}_${this.data.filterId}`,
            filtersValue: this.data.selections.map(({text, value}) => ({text, value}))

        });

        this.eventsEmitter.onMessage(`setFilterIdx.${this.data.ns}`, res => {
            let {nodeId, index, lastFilterIdx} = res;
            this.setData({
                filterIdx: index,
                lastActiveFilterIdx: lastFilterIdx
            }, () => {
                swan.nextTick(() => this.expandSelect(index));
            });

        });

        // 点了mask，要关闭
        this.eventsEmitter.onMessage(`cancelSelect.${this.data.ns}`, () => this.cancelSelect());
    },

    methods: {

        async selContent(index) {
            if (index == null) {
                return console.error('selContent的index必传！');
            }
            return new Promise((r, j) => {
                swan.createSelectorQuery().in(this)
                .selectAll('.select-list > .filter-content')
                .fields({id: true}, idList => {
                    try {
                        // 自定义筛选取不到组件
                        if (this.data.selections[index].slot) {
                            return r({type: 'slot自定义筛选'});
                        }
                        const current = idList[index] && idList[index].id && this.selectComponent(idList[index].id);
                        current ? r(current) : j('选择自定义组件错误');
                    }
                    catch (err) {
                        j(err);
                    }
                }).exec();
            });
        },
        async expandSelect(index) {
            if (index < 0) {
                return;
            }

            try {
                const content = await this.selContent(index);
                typeof content.expand === 'function' && content.expand();
            }
            catch (err) {
                console.error(err);
            }
        },
        async cancelSelect(mask) {
            // 级联筛选取消选择 小程序bug: v-for所有已移除节点都选到
            // // const filters = this.selectAllComponents('.filter-content');
            if (mask) {
                this.broadcast({
                    type: `filterClose.${this.data.ns}`
                });
                // mask && this.$eventHub.emit(`filterClose.${this.ns}`);
            }

            const index = this.data.lastActiveFilterIdx;
            if (index < 0) {
                return;
            }

            try {
                const content = await this.selContent(index);
                typeof content.cancel === 'function' && content.cancel();
            }
            catch (err) {
                console.error(err);
            }
            this.triggerEvent('cancel', index);
        },

        changeFilter(selItem, fillback = false) {
            const {filterIdx, selection} = selItem;
            let val = this.data.filtersValue;
            val.splice(filterIdx, 1, selection);
            this.setData('filtersValue', val);

            fillback && (selItem.filterIdx = this.data.fillBackIdx);

            this.broadcast({
                type: `filterValChange.${this.data.ns}`,
                selItem
            });
        },

        // 比较下拉列表选值是否相同
        itemIdxEqual(currSln, lastItem) {
            if (!lastItem.selection) {
                return false;
            }
            const lastSln = lastItem.selection;
            if (currSln.type !== lastSln.type) {
                return false;
            }
            let currSlnIdx = null;
            let lastSlnIdx = null;
            if (currSln.type === 'singleList') {
                lastSlnIdx = lastSln && lastSln.index;
                currSlnIdx = currSln && currSln.index;
            }
            else if (currSln.type === 'cascade') {
                lastSlnIdx = lastSln && JSON.stringify(lastSln.casIndex);
                currSlnIdx = currSln && JSON.stringify(currSln.casIndex);
            }
            else {
                lastSlnIdx = lastSln && JSON.stringify(lastSln.value);
                currSlnIdx = currSln && JSON.stringify(currSln.value);
            }
            return lastSlnIdx === currSlnIdx;
        },

        itemChange({detail: item}) {
            let {filterIdx, lastSelItem, repeatable, fillBackIdx} = this.data;
            item.fillback && (filterIdx = fillBackIdx);

            if (filterIdx === lastSelItem.filterIdx && this.itemIdxEqual(item, lastSelItem) && !repeatable) {
                return this.cancelSelect(true);
            }

            const selItem = {filterIdx, selection: item};
            this.changeFilter(selItem, item.fillback || false);
            this.setData('lastSelItem', selItem);
        },

        setValue(idx, val) {
            // 级联筛选取消选择
            // 禁止直接使用selectAllComponents 选择s-for 的节点
            // const filters = this.selectAllComponents('filter-content');
            swan.createSelectorQuery().in(this)
            .selectAll('.select-list > .filter-content')
            .fields({id: true}, idList => {
                try {
                    const current = idList[idx] && idList[idx].id && this.selectComponent(idList[idx].id);
                    if (current && typeof current.setValue === 'function') {
                        this.setData('fillBackIdx', idx);
                        current.setValue(val);
                    }
                }
                catch (err) {
                    console.error('选择自定义组件错误: ', err);
                }
            }).exec();
        },

        noop() {}
    }


});
