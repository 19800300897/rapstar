/**
 * @file index.js
 * @author LipengJia <jialipeng@baidu.com>
 * @date 2020-01-06
 */

Component({
    externalClasses: [
        'gov-text-collapse-container',
        'gov-text-collapse-content',
        'gov-text-collapse-btn'
    ],

    properties: {
        // 文本内容 * 可响应，slot不可监听变化
        text: {
            type: String,
            value: '',
            observer() {
                this.calcEllipsis();
            }
        },

        // 超过行折叠
        line: {
            type: Number,
            value: 5
        },

        // 是否展示收起、展开按钮
        showBtn: {
            type: Boolean,
            value: true
        },

        // 按钮文字
        btnText: {
            type: Array,
            value: ['展开', '收起']
        },

        // 文本内容是否可选择 * <text>标签内置方便拿computedStyle
        selectable: {
            type: Boolean,
            value: true
        },

        // 是否展开
        expand: {
            type: Boolean,
            value: false,
            observer(n) {
                this.setData({
                    currentExpand: n
                });
            }
        }
    },

    data: {
        // 组件自身expand状态
        currentExpand: false,
        // 是否超出
        ellipsis: false,
        // 初始不显示，避免抖动
        show: false
    },

    methods: {
        getTextStyle() {
            return new Promise((r, j) => {
                swan.createSelectorQuery().in(this).select('.text-content')
                .fields({
                    computedStyle: ['line-height', 'font-size'],
                    size: true
                }, res => {
                    if (!res) {
                        return j('查询返回数据为空');
                    }
                    r(res);
                }).exec();
            });
        },

        async calcEllipsis() {
            try {
                const {height, 'line-height': lineHeight, 'font-size': fontSize} = await this.getTextStyle();
                this.setData({
                    ellipsis: height > parseFloat(lineHeight) * this.data.line,
                    show: true
                });
            }
            catch (err) {
                console.error(err);
            }
        },

        btnClk() {
            this.setData('currentExpand', !this.data.currentExpand);
        }
    },

    created() {
        this.calcEllipsis();
    }
});
