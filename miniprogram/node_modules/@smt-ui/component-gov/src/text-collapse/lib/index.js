"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

/**
 * @file index.js
 * @author LipengJia <jialipeng@baidu.com>
 * @date 2020-01-06
 */
Component({
  externalClasses: ['gov-text-collapse-container', 'gov-text-collapse-content', 'gov-text-collapse-btn'],
  properties: {
    // 文本内容 * 可响应，slot不可监听变化
    text: {
      type: String,
      value: '',
      observer: function observer() {
        this.calcEllipsis();
      }
    },
    // 超过行折叠
    line: {
      type: Number,
      value: 5
    },
    // 是否展示收起、展开按钮
    showBtn: {
      type: Boolean,
      value: true
    },
    // 按钮文字
    btnText: {
      type: Array,
      value: ['展开', '收起']
    },
    // 文本内容是否可选择 * <text>标签内置方便拿computedStyle
    selectable: {
      type: Boolean,
      value: true
    },
    // 是否展开
    expand: {
      type: Boolean,
      value: false,
      observer: function observer(n) {
        this.setData({
          currentExpand: n
        });
      }
    }
  },
  data: {
    // 组件自身expand状态
    currentExpand: false,
    // 是否超出
    ellipsis: false,
    // 初始不显示，避免抖动
    show: false
  },
  methods: {
    getTextStyle: function getTextStyle() {
      var _this = this;

      return new Promise(function (r, j) {
        swan.createSelectorQuery()["in"](_this).select('.text-content').fields({
          computedStyle: ['line-height', 'font-size'],
          size: true
        }, function (res) {
          if (!res) {
            return j('查询返回数据为空');
          }

          r(res);
        }).exec();
      });
    },
    calcEllipsis: function calcEllipsis() {
      var _this2 = this;

      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _yield$_this2$getText, height, lineHeight, fontSize;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return _this2.getTextStyle();

              case 3:
                _yield$_this2$getText = _context.sent;
                height = _yield$_this2$getText.height;
                lineHeight = _yield$_this2$getText['line-height'];
                fontSize = _yield$_this2$getText['font-size'];

                _this2.setData({
                  ellipsis: height > parseFloat(lineHeight) * _this2.data.line,
                  show: true
                });

                _context.next = 13;
                break;

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](0);
                console.error(_context.t0);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 10]]);
      }))();
    },
    btnClk: function btnClk() {
      this.setData('currentExpand', !this.data.currentExpand);
    }
  },
  created: function created() {
    this.calcEllipsis();
  }
});