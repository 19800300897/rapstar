/**
 * @file behavior
 * @author zengqingzhuang(zengqingzhuang@baidu.com)
 */
import EventsEmitter from '@smt-lib/observer';
const eventsEmitter = new EventsEmitter();

/* globals Behavior, getApp, swan */
/* eslint-disable */
const events = Behavior({
    /* eslint-enable */

    created() {
        /* eslint-disable */
        const app = getApp();
        /* eslint-enable */
        if (!app._solutionEventsEmitter) {
            app._solutionEventsEmitter = eventsEmitter;
        }
        this.eventsEmitter = app._solutionEventsEmitter;
    },

    methods: {

        /**
         * 广播，通知所有组件
         * @param {Object} [message] - 需要广播的消息
         */
        broadcast(message) {
            console.log(message);
            this.eventsEmitter.fireMessage({
                ...message,
                nodeId: this.nodeId
            });
        },

        /**
         * 获取所有属于自己slot的子组件
         *
         */
        getAllSlotComponents() {
            const ids = Object.keys(this.pageinstance.privateProperties.customComponents);
            const selectors = ids.map(id => `#${this.nodeId} #${id}`).join(',');
            return new Promise((resolve, reject) => {
                swan.createSelectorQuery()
                    .selectAll(selectors)
                    .fields({
                        id: true
                    }, res => {
                        const childComponents = res.map(({id}) => this.pageinstance.selectComponent(id));
                        resolve(childComponents);
                    }).exec();
            });
        },

        listenInnerMessage(type, cb) {
            this.eventsEmitter.onMessage(type, message => {
                this.getAllSlotComponents()
                    .then(childComponents => {
                        const isChildComponent = childComponents
                            .some(component => component.id === message.nodeId);
                        if (isChildComponent) {
                            message.childComponents = childComponents;
                            cb && cb(message);
                        }
                    });
            });
        }
    }
});

/* eslint-disable */
const formItem = Behavior({
    /* eslint-enable */

    methods: {

        /**
         * 校验函数
         * @return {bool} 该formitem是否检验通过
         */
        validate() {
            return true;
        },

        /**
         * 重置析构方法
         * @return {bool} 是否重置成功
         */
        reset() {
            return true;
        },

        /**
         * 在item没有校验通过的时候的展现策略
         */
        validateWarn() {},

        /**
         * 当前form-item的析构
         */
        reset() {}
    }
});

module.exports.default = module.exports = {
    events,
    formItem
};
