"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _color = require("../../common/style/color");

var _px = require("../../common/utils/px");

/**
 * @file filter-single-list组件
 * @author huangjing02
 */

/* globals Page, swan, getApp, getCurrentPages */
Component({
  externalClasses: ['gov-filter-checkbox'],
  properties: {
    // 筛选器ID
    options: {
      type: Array,
      value: []
    },
    // 筛选项数组，数组格式[{text:'名称', value: '值，string/Array.<string>', options: [{text: '', value: ''}, {text: '', value: ''}]}]
    optionKey: {
      type: String,
      value: '',
      observer: function observer(n) {
        this.setData({
          currOptionKey: n || 'text'
        });
      }
    },
    column: {
      type: Number,
      value: 3,
      observer: function observer(n) {
        var style = {
          'height': (0, _px.upx2dpx)(147) + 'px',
          'min-height': (0, _px.upx2dpx)(147) + 'px',
          'font-size': (0, _px.upx2dpx)(42) + 'px'
        };
        style.width = (0, _px.upx2dpx)((n || 3) === 3 ? 364 : 558) + 'px';
        this.setData({
          itemSyl: style,
          currColumn: n || 3
        });
      }
    },
    // 高亮时的文字和icon颜色
    activeColor: {
      type: String,
      value: _color.COLOR_TIPS_RED
    },
    activeInlineBgColor: {
      type: String,
      value: _color.COLOR_RED_LIGHT
    }
  },
  data: {
    currentValue: [],
    lastValue: [],
    rowSyl: {
      'margin-top': (0, _px.upx2dpx)(24) + 'px'
    },
    // 三列样式
    rowItemSyl: {
      'margin-right': (0, _px.upx2dpx)(24) + 'px'
    },
    iconSyl: {
      width: (0, _px.upx2dpx)(50) + 'px',
      height: (0, _px.upx2dpx)(50) + 'px'
    },
    currOptionKey: 'text',
    currColumn: 3,
    itemSyl: {
      'height': (0, _px.upx2dpx)(147) + 'px',
      'min-height': (0, _px.upx2dpx)(147) + 'px',
      'font-size': (0, _px.upx2dpx)(42) + 'px',
      'width': (0, _px.upx2dpx)(364) + 'px'
    }
  },
  created: function created() {
    this.setData({
      currentValue: (0, _toConsumableArray2["default"])(this.data.value),
      lastValue: (0, _toConsumableArray2["default"])(this.data.value)
    });
  },
  methods: {
    /* eslint-disable fecs-prefer-spread-element */
    groupChange: function groupChange(_ref) {
      var value = _ref.detail;
      this.setData({
        currentValue: (0, _toConsumableArray2["default"])(value)
      });
    },
    cancel: function cancel() {
      this.setData({
        currentValue: (0, _toConsumableArray2["default"])(this.data.lastValue)
      });
    },
    resetHdl: function resetHdl() {
      this.setData({
        currentValue: []
      });
    },
    ensuHdl: function ensuHdl() {
      var _this = this;

      this.setData({
        lastValue: (0, _toConsumableArray2["default"])(this.data.currentValue)
      });
      this.triggerEvent('change', {
        type: 'check-box-group',
        groupValue: this.data.currentValue.map(function (e) {
          return _this.data.options[e];
        }),
        value: (0, _toConsumableArray2["default"])(this.data.currentValue),
        fillback: false
      });
    }
    /* eslint-enable fecs-prefer-spread-element */

  }
});