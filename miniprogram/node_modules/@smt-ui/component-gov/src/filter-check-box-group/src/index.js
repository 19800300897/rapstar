/**
 * @file filter-single-list组件
 * @author huangjing02
 */

/* globals Page, swan, getApp, getCurrentPages */
import {COLOR_TIPS_RED, COLOR_BLACK, COLOR_RED_LIGHT} from '../../common/style/color';
import {upx2dpx} from '../../common/utils/px';


Component({

    externalClasses: [
        'gov-filter-checkbox'
    ],

    properties: {
        // 筛选器ID
        options: {
            type: Array,
            value: []
        },

        // 筛选项数组，数组格式[{text:'名称', value: '值，string/Array.<string>', options: [{text: '', value: ''}, {text: '', value: ''}]}]
        optionKey: {
            type: String,
            value: '',
            observer(n) {
                this.setData({
                    currOptionKey: n || 'text'
                });
            }
        },

        column: {
            type: Number,
            value: 3,
            observer(n) {
                let style = {
                    'height': upx2dpx(147) + 'px',
                    'min-height': upx2dpx(147) + 'px',
                    'font-size': upx2dpx(42) + 'px'
                };
                style.width = upx2dpx((n || 3) === 3 ? 364 : 558) + 'px';
                this.setData({
                    itemSyl: style,
                    currColumn: n || 3
                });
            }
        },

        // 高亮时的文字和icon颜色
        activeColor: {
            type: String,
            value: COLOR_TIPS_RED
        },

        activeInlineBgColor: {
            type: String,
            value: COLOR_RED_LIGHT
        }
    },

    data: {
        currentValue: [],
        lastValue: [],

        rowSyl: {
            'margin-top': upx2dpx(24) + 'px'
        },

        // 三列样式
        rowItemSyl: {
            'margin-right': upx2dpx(24) + 'px'
        },

        iconSyl: {
            width: upx2dpx(50) + 'px',
            height: upx2dpx(50) + 'px'
        },

        currOptionKey: 'text',

        currColumn: 3,

        itemSyl: {
            'height': upx2dpx(147) + 'px',
            'min-height': upx2dpx(147) + 'px',
            'font-size': upx2dpx(42) + 'px',
            'width': upx2dpx(364) + 'px'
        }
    },

    created() {
        this.setData({
            currentValue: [...this.data.value],
            lastValue: [...this.data.value]
        });
    },

    methods: {
        /* eslint-disable fecs-prefer-spread-element */
        groupChange({detail: value}) {
            this.setData({
                currentValue: [...value]
            });
        },

        cancel() {
            this.setData({
                currentValue: [...this.data.lastValue]
            });
        },

        resetHdl() {
            this.setData({
                currentValue: []
            });
        },

        ensuHdl() {
            this.setData({
                lastValue: [...this.data.currentValue]
            });
            this.triggerEvent('change', {
                type: 'check-box-group',
                groupValue: this.data.currentValue.map(e => this.data.options[e]),
                value: [...this.data.currentValue],
                fillback: false
            });
        }
        /* eslint-enable fecs-prefer-spread-element */
    }
});
