"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _px = require("../../common/utils/px");

var _color = require("../../common/style/color");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Component({
  externalClasses: ['gov-checkbox'],
  properties: {
    value: {
      type: Boolean,
      value: false,
      observer: function observer(n) {
        this.updateIcon();
      }
    },
    inline: {
      type: Boolean,
      value: false
    },
    disabled: {
      type: Boolean,
      value: false,
      observer: function observer(n) {
        this.updateIcon();
      }
    },
    itemStyle: {
      type: Object,
      value: {},
      observer: function observer(n) {
        this.setData('currentItemSty', n);
      }
    },
    iconStyle: {
      type: Object,
      value: {}
    },
    twoColumn: {
      type: Boolean,
      value: false
    },
    inFilter: {
      type: Boolean,
      value: false
    },
    activeColor: {
      type: String,
      value: _color.COLOR_TIPS_RED
    },
    activeBgColor: {
      type: String,
      value: _color.COLOR_RED_LIGHT
    }
  },
  data: {
    iconStyl: {},
    currentItemSty: {},
    showIcon: false
  },
  created: function created() {
    this.updateIcon();
  },
  methods: {
    clkHdl: function clkHdl() {
      var checked = !this.data.value;
      this.triggerEvent('click', {
        disabled: this.data.disabled,
        checked: checked
      });

      if (this.data.disabled) {
        return;
      }

      this.setData({
        value: checked
      });
      this.triggerEvent('change', checked);
    },
    updateIcon: function updateIcon() {
      var _this$data = this.data,
          inline = _this$data.inline,
          value = _this$data.value,
          disabled = _this$data.disabled,
          inFilter = _this$data.inFilter,
          showIcon = _this$data.showIcon,
          activeColor = _this$data.activeColor,
          activeBgColor = _this$data.activeBgColor;
      var icon = {
        name: '',
        size: '',
        color: ''
      }; // 如果是行内模式

      if (inline) {
        // 非选中
        if (!value) {
          showIcon = false;
        } else {
          showIcon = true;
          icon.color = [activeColor, _color.COLOR_WHITE]; // 如果是在筛选器内，样式覆盖

          if (inFilter) {
            icon.size = (0, _px.upx2dpx)(50) + 'px';
            icon.name = 'checked-s';
          } else {
            icon.size = (0, _px.upx2dpx)(66) + 'px';
            icon.name = 'checked-l';
          }
        }
      } else {
        showIcon = true;
        icon.size = (0, _px.upx2dpx)(66) + 'px'; // 禁用

        if (disabled) {
          icon.name = 'radio-forbid';
          icon.color = ['#f1f1f1', _color.COLOR_GRAY_4];
        } // 非选中
        else if (!value) {
            icon.name = 'radio-uncheck';
            icon.color = _color.COLOR_GRAY_4;
          } else {
            icon.name = 'complete';
            icon.color = [activeColor, _color.COLOR_WHITE];
          }
      }

      this.setData({
        iconStyl: icon,
        showIcon: showIcon,
        currentItemSty: _objectSpread(_objectSpread({}, this.data.itemStyle), {}, {
          color: value && inline ? activeColor : '',
          'background-color': value && inline ? activeBgColor : ''
        })
      });
    }
  }
});