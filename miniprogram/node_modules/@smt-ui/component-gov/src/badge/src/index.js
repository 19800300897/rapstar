/**
 * @file 自定义徽标数
 * @author swan
 */

const prefixCls = 'badge';
const statusArr = ['success', 'processing', 'default', 'error', 'warning'];
const typeArr = ['success', 'primary', 'normal', 'error', 'warning', 'info'];

Component({
    externalClasses: [
        'gov-text',
        'gov-dot-class'
    ],
    properties: {
        count: {
            type: Number,
            value: '',
            observer(newVal, oldVal) {
                this.computedBadge();
                this.computedFinalCount();
                this.computedHasCount();
            }
        },
        dot: {
            type: Boolean,
            value: false,
            observer(newVal, oldVal) {
                this.computedBadge();
            }

        },
        overflowCount: {
            type: [Number, String],
            value: 9999,
            observer(newVal, oldVal) {
                this.computedFinalCount();
            }
        },
        showZero: {
            type: Boolean,
            value: false,
            observer(newVal, oldVal) {
                this.computedBadge();
                this.computedHasCount();
            }
        },
        text: {
            type: String,
            value: '',
            observer(newVal, oldVal) {
                this.computedBadge();
                this.computedFinalCount();
                this.computedHasCount();
            }
        },
        status: {
            type: String,
            value: '',
            observer(newVal, oldVal) {
                this.computedStatus();
                this.computedStatusClasses();
            }
        },
        type: {
            type: String,
            value: '',
            observer(newVal, oldVal) {
                this.computedType();
                this.computedCountClasses();
            }
        },
        offset: {
            type: Array,
            observer(newVal, oldVal) {
                this.computedStyle();
            }
        },
        alone: {
            type: Boolean,
            value: false,
            observer(newVal, oldVal) {
                this.computedCountClasses();
            }
        }
    },
    data: {
        status: false,
        hasType: false,
        classes: `${prefixCls}`,
        dotClasses: `${prefixCls}-dot`,
        countClasses: [],
        statusClasses: [],
        styles: {},
        finalCount: 0,
        badge: false,
        hasCount: false
    },
    lifetimes: {
        attached() {
            // 计算badge
            this.computedBadge();
            // 计算status
            this.computedStatus();
            // 计算样式
            this.computedType();
            // 计算类
            this.computedClasses();
            // 计算点的类
            this.computedDotClasses();
            // 数字类型的样式
            this.computedCountClasses();
            // 状态类
            this.computedStatusClasses();
            // 坐标位置调整
            this.computedStyle();
            // 最终显示的数字/文案
            this.computedFinalCount();
            // 是否有count
            this.computedHasCount();
        }
    },
    methods: {
        computedBadge() {
            let status = false;
            if (this.data.count) {
                status = !(parseInt(this.data.count, 10) === 0);
            }
            if (this.data.dot) {
                status = true;
                if (this.data.count !== null) {
                    if (parseInt(this.data.count, 10) === 0) {
                        status = false;
                    }
                }
            }
            if (this.data.text !== '') {
                status = true;
            }
            this.setData({
                badge: status || this.data.showZero
            });
        },
        computedStatus() {
            let flag = false;
            flag = statusArr.includes(this.data.status);
            this.setData({
                status: flag
            });
            return flag;
        },
        computedType() {
            let flag = false;
            flag = typeArr.includes(this.data.type);
            this.setData({
                hasType: flag
            });
            return flag;
        },
        computedClasses() {
            let classes = `${prefixCls}`;
            this.setData({
                classes
            });
        },
        computedDotClasses() {
            let dotClasses = `${prefixCls}-dot`;
            this.setData({
                dotClasses
            });
        },
        computedCountClasses() {
            let countClasses = [`${prefixCls}-count`];
            let type = !!this.computedType();
            if (!!this.data.alone) {
                countClasses.push(`${prefixCls}-count-alone`);
            }
            if (!!type) {
                countClasses.push(`${prefixCls}-count-${this.data.type}`);
            }
            this.setData({
                countClasses
            });
        },
        computedStatusClasses() {
            let statusClasses = [`${prefixCls}-status-dot`];
            if (!!this.data.status) {
                statusClasses.push(`${prefixCls}-status-${this.data.status}`);
            }
            this.setData({
                statusClasses
            });
        },
        computedStyle() {
            let style = {};
            // 设置状态点的位置偏移，格式为 [x, y]
            if (this.data.offset && this.data.offset.length === 2) {
                style['top'] = `${this.data.offset[0]}px`;
                style['left'] = `${this.data.offset[1]}px`;
            }
            this.setData({
                styles: style
            });
        },
        computedFinalCount() {
            let finalCount = 0;
            if (this.data.text !== '') {
                finalCount = this.data.text.slice(0, 3);
            }
            else if (parseInt(this.data.count, 10) >= parseInt(this.data.overflowCount, 10)) {
                finalCount = `${this.data.overflowCount}+`;
            }
            else {
                finalCount = this.data.count || 0;
            }
            this.setData({
                finalCount: finalCount
            });
        },
        computedHasCount() {
            let hasCount = false;
            if (this.data.count || this.data.text !== '') {
                hasCount = true;
            }
            else if (this.data.showZero && parseInt(this.data.count, 10) === 0) {
                hasCount = true;
            }
            else {
                hasCount = false;
            }
            this.setData({
                hasCount
            });
        }
    }
});
