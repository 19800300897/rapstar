"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _index = require("../../common/utils/index");

var _color = require("../../common/style/color");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Component({
  externalClasses: ['gov-filter-cascade', 'gov-column'],
  properties: {
    // 筛选器ID
    options: {
      type: Array,
      value: []
    },
    // 筛选项数组，数组格式[{text:'名称', value: '值，string/Array.<string>', options: [{text: '', value: ''}, {text: '', value: ''}]}]
    optionKey: {
      type: String,
      value: '',
      observer: function observer(n) {
        this.setData({
          currOptionKey: n || 'text'
        });
      }
    },
    value: {
      type: [String, Number, Array],
      value: ''
    },
    // 高亮时的文字和icon颜色
    activeColor: {
      type: String,
      value: _color.COLOR_TIPS_RED
    },
    // 默认状态的文字颜色
    fontColor: {
      type: String,
      value: _color.COLOR_BLACK
    }
  },
  data: {
    // 是否ios
    isIos: _index.isIos,
    // 当前选中key
    currentOptions: [],
    currentValue: [],
    // 上一次值
    lastValue: [],
    rendered: false,
    targets: [],
    scrollTops: [],
    animate: false
  },
  created: function created() {
    this.init(this.data.value);
  },
  attached: function attached() {
    this.setData('rendered', true);
  },
  methods: {
    // value后都取第一个
    genOptions: function genOptions() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var i = 0;

      var dfs = function dfs(options, value, r) {
        var items = options.map(function (_ref) {
          var children = _ref.children,
              item = (0, _objectWithoutProperties2["default"])(_ref, ["children"]);
          return item;
        });
        r.push(items);
        var child = options[value[i] || 0] && options[value[i++] || 0].children;
        child && dfs(child, value, r);
        return r;
      };

      return dfs(this.data.options, value, r);
    },
    // 数组填零
    padEnd: function padEnd(arr, maxLen, _char) {
      var n = maxLen - arr.length;

      while (n--) {
        arr.push(_char);
      }

      return arr;
    },
    clkHdl: function clkHdl(e) {
      var _e$currentTarget$data = e.currentTarget.dataset,
          index = _e$currentTarget$data.index,
          idx = _e$currentTarget$data.idx,
          item = _e$currentTarget$data.item;
      this.clkInnerHdl(index, idx, item);
    },
    clkInnerHdl: function clkInnerHdl(index, idx, item, fillback) {
      var _this = this;

      var segEqual = function segEqual(nums1, nums2, start, end) {
        // 闭区间
        if (start > end) {
          return false;
        }

        var len = end - start + 1;

        while (len--) {
          if (nums1[len] !== nums2[len]) {
            return false;
          }
        }

        return true;
      };

      var currDup = (0, _toConsumableArray2["default"])(this.data.currentValue);
      var val = this.data.currentValue;
      val.splice(index);
      val.push(idx);
      this.setData('currentValue', val); // this.data.currentValue.splice(index);
      // this.data.currentValue.push(idx);

      var last = this.genOptions(this.data.currentValue).length - 1;
      var tops = (0, _toConsumableArray2["default"])(this.data.scrollTops);

      if (idx !== currDup[index]) {
        var j = index;

        while (j <= last) {
          j++;
          tops.splice(j, 1, 0);
        }
      }

      this.setData({
        animate: false
      }, function () {
        // swan.nextTick(() => {});
        _this.setData({
          scrollTops: (0, _toConsumableArray2["default"])(tops),
          animate: true
        }); // 选值：保存上次值和位置


        if (index === last) {
          _this.data.currentValue.splice(index, 1, idx);

          var _this$data = _this.data,
              currentValue = _this$data.currentValue,
              currentOptions = _this$data.currentOptions;

          _this.setData('lastValue', (0, _toConsumableArray2["default"])(currentValue));

          _this.triggerEvent('change', _objectSpread({
            type: 'cascade',
            casCol: index,
            casRow: idx,
            casIndex: (0, _toConsumableArray2["default"])(currentValue),
            casValue: currentOptions.map(function (e, i) {
              return e[currentValue[i]];
            }),
            fillback: fillback
          }, item));
        } // 路径相等，则聚焦选中值
        else if (segEqual(_this.data.currentValue, _this.data.lastValue, 0, index)) {
            var _val = _this.data.currentValue;

            _val.splice(0);

            _val.push.apply(_val, (0, _toConsumableArray2["default"])(_this.data.lastValue));

            _this.setData('currentValue', _val);

            _this.setData('currentOptions', _this.genOptions(_this.data.lastValue));

            swan.nextTick(function () {
              _this.setData({
                targets: _this.data.lastValue.map(function (idx) {
                  return 'item-idx-' + idx;
                })
              });
            });
          } // 点击不同列表项，将剩余级置顶
          else {
              _this.padEnd(_this.data.currentValue, last, 0);
            }

        _this.setData('currentOptions', _this.genOptions(_this.data.currentValue));
      });
    },
    getIdxsByVal: function getIdxsByVal(val) {
      var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      var dfs = function dfs(options, val) {
        return options.some(function (_ref2, idx) {
          var value = _ref2.value,
              children = _ref2.children;

          if (children && dfs(children, val, r)) {
            return r.push(idx);
          }

          return value === val && r.push(idx);
        });
      };

      dfs(this.data.options, val);
      return r.reverse();
    },

    /**
     * 获取一组values的位置 * 有更好方法，暂时保留
     * @param {Array} vals
     * @return {Promise<array>}
     */
    getCurrValTop: function getCurrValTop(vals) {
      var _this2 = this;

      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var fn, cols, items, _iterator, _step, _step$value, idx, val;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                fn = function fn(col, item) {
                  return new Promise(function (r) {
                    var scrollView = item == null;
                    var q = swan.createSelectorQuery()["in"](_this2);
                    var selector = '.column-' + col + (scrollView ? '' : ' .item-idx-' + item);
                    var method = scrollView ? 'scrollOffset' : 'boundingClientRect';
                    var resultKey = scrollView ? 'scrollTop' : 'top';
                    q.select(selector)[method](function (res) {
                      return r(res[resultKey]);
                    }).exec();
                  });
                };

                cols = [];
                items = [];
                _iterator = _createForOfIteratorHelper(vals.entries());
                _context.prev = 4;

                _iterator.s();

              case 6:
                if ((_step = _iterator.n()).done) {
                  _context.next = 20;
                  break;
                }

                _step$value = (0, _slicedToArray2["default"])(_step.value, 2), idx = _step$value[0], val = _step$value[1];
                _context.t0 = cols;
                _context.next = 11;
                return fn(idx);

              case 11:
                _context.t1 = _context.sent;

                _context.t0.push.call(_context.t0, _context.t1);

                _context.t2 = items;
                _context.next = 16;
                return fn(idx, val);

              case 16:
                _context.t3 = _context.sent;

                _context.t2.push.call(_context.t2, _context.t3);

              case 18:
                _context.next = 6;
                break;

              case 20:
                _context.next = 25;
                break;

              case 22:
                _context.prev = 22;
                _context.t4 = _context["catch"](4);

                _iterator.e(_context.t4);

              case 25:
                _context.prev = 25;

                _iterator.f();

                return _context.finish(25);

              case 28:
                return _context.abrupt("return", cols.map(function (scrollTop, idx) {
                  return scrollTop + items[idx];
                }));

              case 29:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[4, 22, 25, 28]]);
      }))();
    },
    panelClk: function panelClk() {
      this.triggerEvent('panelclick');
    },

    /**
     * 还没显示，无法操作位置, 不要太快
     */
    expand: function expand() {
      var _this3 = this;

      if (this.data.rendered) {
        setTimeout(function () {
          _this3.setData('targets', _this3.data.lastValue.map(function (idx) {
            return 'item-idx-' + idx;
          }));
        }, 100);
      }
    },
    cancel: function cancel() {
      var _this$data$currentVal;

      this.data.currentValue.splice(0);

      (_this$data$currentVal = this.data.currentValue).push.apply(_this$data$currentVal, (0, _toConsumableArray2["default"])(this.data.lastValue));

      this.setData('currentOptions', this.genOptions((0, _toConsumableArray2["default"])(this.data.lastValue)));
    },
    init: function init(value, fillback) {
      var _this4 = this;

      if (!Array.isArray(value)) {
        // 接口有的value是string，有的是number
        value = this.getIdxsByVal(value);
      }

      var normVal = JSON.stringify(value);
      var normCurrVal = JSON.stringify(this.data.currentValue);

      if (fillback && normVal === normCurrVal) {
        // 回填相同的值不触发
        return;
      } // 初始化选项


      var currentOptions = this.genOptions(value);
      this.setData('currentOptions', currentOptions); // 多列value时，默认选第一项

      if (value.length === 0 && currentOptions.length > 1) {
        value = Array.from({
          length: currentOptions.length - 1
        }, function (_) {
          return 0;
        });
      }

      this.setData({
        currentValue: value,
        lastValue: (0, _toConsumableArray2["default"])(value)
      });

      if (!this.data.rendered) {
        // 初始化不触发选中
        // 初始化也要自动聚焦
        this.setData({
          scrollTops: new Array(value.length).fill(0)
        }, function () {
          _this4.setData('targets', value.map(function (idx) {
            return 'item-idx-' + idx;
          }));
        }); // swan.nextTick(() => {});

        return;
      }

      swan.nextTick(function () {
        var last = value.length - 1;
        var lastVal = value[last];

        _this4.clkInnerHdl(last, lastVal, currentOptions[last][lastVal], fillback);
      });
    },
    // 级联筛选回填：value回填string，返回object
    // 缺点：无法使用v-model，表单需转换； 优点：无需开发者转换，适用于非表单场景
    setValue: function setValue(value) {
      this.init(value, true);
    }
  }
});