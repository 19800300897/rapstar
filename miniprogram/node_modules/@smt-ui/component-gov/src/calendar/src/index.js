/**
 * @file calendar.js
 * @author huangzilong (huangzilong@baidu.com)
 */
import {getDay, getMonth} from './util';

Component({
    properties: {
        /* eslint-disable fecs-properties-quote */
        type: {
            type: String,
            value: 'month'
        },
        range: {
            type: Array,
            value: [],
            observer(n) {
                n && this.checkForbidVal();
            }
        },
        value: {
            type: Object,
            value: {},
            observer(n) {
                const normVal = JSON.stringify(n);
                const normCurrVal = JSON.stringify(this.data.currentValue);
                if (normVal !== normCurrVal) {
                    if (n && !/\d{4}-\d{2}-\d{2}/.test(n.day)) {
                        return console.error('value回填错误，格式须为: yyyy-mm-dd');
                    }

                    this.setData({
                        monthIdx: this.getMonthIdx(n),
                        currentValue: n
                    });
                    swan.nextTick(() => this.checkForbidVal());
                }
            }
        },
        separation: {
            type: String,
            value: '-'
        },
        repeatable: {
            type: Boolean,
            value: false
        },
        disabled: {
            type: Boolean,
            value: false
        },
        allDayValid: {
            type: Boolean,
            value: false
        },
        weekText: {
            type: Array,
            value: ['日', '一', '二', '三', '四', '五', '六']
        },
        showOptionPanel: {
            type: Boolean,
            value: true
        }
        /* eslint-enable fecs-properties-quore */
    },
    data: {
        currentValue: '',
        today: getDay(), // yyyy-mm-dd
        monthIdx: 0,
        fmtedMonths: []
    },
    created() {
        // 初始化联动相关
        let value = this.data.value;

        this.setData({
            monthIdx: value ? this.getMonthIdx(value) : 0,
            currentValue: value ? value : ''
        });
        swan.nextTick(() => this.fmtedMonth());
    },
    methods: {
        fmtedMonth() { // 格式化过的
            const {range, separation} = this.data;

            const result = range.map(({name, value}) => {
                const [y, m] = name.split(separation);
                // const days = Array.from({length: new Date(y, m, 0).getDate()}, (_, i) => i + 1); // 渲染当前月份的总天数
                const days = Array.from({length: value.length}, (_, i) => i + 1); // 渲染后端返回的总天数

                const n = new Date(y, m - 1, 1).getDay();
                days.unshift(...new Array(n).fill(null));
                const r = [];
                let day = 1;

                days.forEach((e, idx) => {
                    // idx % 7 === 0 && r.push([]); // row慢
                    const item = e && {value: [y, m, day > 9 && day || '0' + day].join(separation), day};

                    item && day++;
                    r.push(item);
                });

                return {name, title: `${y}年${+m}月`, value: r, offset: n};
            });

            this.setData({
                fmtedMonths: result
            });
        },
        monthClk(e) {
            let next = e.currentTarget.dataset.next;
            let {range, monthIdx} = this.data;

            next && monthIdx < range.length - 1 && monthIdx++;
            !next && monthIdx > 0 && monthIdx--;

            this.setData({
                monthIdx
            });
        },
        getMonthIdx(value = this.data.value) { // 默认当前month
            const {range, separation} = this.data;
            const ym = (value && value.day || getMonth()).split(separation).slice(0, 2).join('-');
            const idx = range.map(e => e.name).indexOf(ym);

            return idx;
        },
        dayClk(e) {
            let value = e.currentTarget.dataset.value;
            let {disabled, repeatable, allDayValid} = this.data;

            this.triggerEvent('dayclick', {value, disabled});
            if (!disabled && (value.state || allDayValid)) {
                if (repeatable || this.data.value !== value) {
                    return this.triggerEvent('change', value);
                }
            }
        },
        // 例如： value是一个不可选日期, 应置空防止提交
        checkForbidVal() {
            let {range, value} = this.data;

            const monthIdx = this.getMonthIdx();
            const dates = range[monthIdx] && range[monthIdx].value;
            if (Array.isArray(dates) && dates.length > 0) {
                const dayIdx = dates.map(({day}) => day).indexOf(value.day);
                if (dayIdx > -1) {
                    const state = dates[dayIdx].state;
                    if (!state) {
                        this.triggerEvent('change', '');
                        console.log('设置了一个禁止的时间，置为未选择状态');
                    }
                }
            }
        }
    }
});
