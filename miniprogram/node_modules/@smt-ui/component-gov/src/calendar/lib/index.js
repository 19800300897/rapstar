"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _util = require("./util");

/**
 * @file calendar.js
 * @author huangzilong (huangzilong@baidu.com)
 */
Component({
  properties: {
    /* eslint-disable fecs-properties-quote */
    type: {
      type: String,
      value: 'month'
    },
    range: {
      type: Array,
      value: [],
      observer: function observer(n) {
        n && this.checkForbidVal();
      }
    },
    value: {
      type: Object,
      value: {},
      observer: function observer(n) {
        var _this = this;

        var normVal = JSON.stringify(n);
        var normCurrVal = JSON.stringify(this.data.currentValue);

        if (normVal !== normCurrVal) {
          if (n && !/\d{4}-\d{2}-\d{2}/.test(n.day)) {
            return console.error('value回填错误，格式须为: yyyy-mm-dd');
          }

          this.setData({
            monthIdx: this.getMonthIdx(n),
            currentValue: n
          });
          swan.nextTick(function () {
            return _this.checkForbidVal();
          });
        }
      }
    },
    separation: {
      type: String,
      value: '-'
    },
    repeatable: {
      type: Boolean,
      value: false
    },
    disabled: {
      type: Boolean,
      value: false
    },
    allDayValid: {
      type: Boolean,
      value: false
    },
    weekText: {
      type: Array,
      value: ['日', '一', '二', '三', '四', '五', '六']
    },
    showOptionPanel: {
      type: Boolean,
      value: true
    }
    /* eslint-enable fecs-properties-quore */

  },
  data: {
    currentValue: '',
    today: (0, _util.getDay)(),
    // yyyy-mm-dd
    monthIdx: 0,
    fmtedMonths: []
  },
  created: function created() {
    var _this2 = this;

    // 初始化联动相关
    var value = this.data.value;
    this.setData({
      monthIdx: value ? this.getMonthIdx(value) : 0,
      currentValue: value ? value : ''
    });
    swan.nextTick(function () {
      return _this2.fmtedMonth();
    });
  },
  methods: {
    fmtedMonth: function fmtedMonth() {
      // 格式化过的
      var _this$data = this.data,
          range = _this$data.range,
          separation = _this$data.separation;
      var result = range.map(function (_ref) {
        var name = _ref.name,
            value = _ref.value;

        var _name$split = name.split(separation),
            _name$split2 = (0, _slicedToArray2["default"])(_name$split, 2),
            y = _name$split2[0],
            m = _name$split2[1]; // const days = Array.from({length: new Date(y, m, 0).getDate()}, (_, i) => i + 1); // 渲染当前月份的总天数


        var days = Array.from({
          length: value.length
        }, function (_, i) {
          return i + 1;
        }); // 渲染后端返回的总天数

        var n = new Date(y, m - 1, 1).getDay();
        days.unshift.apply(days, (0, _toConsumableArray2["default"])(new Array(n).fill(null)));
        var r = [];
        var day = 1;
        days.forEach(function (e, idx) {
          // idx % 7 === 0 && r.push([]); // row慢
          var item = e && {
            value: [y, m, day > 9 && day || '0' + day].join(separation),
            day: day
          };
          item && day++;
          r.push(item);
        });
        return {
          name: name,
          title: "".concat(y, "\u5E74").concat(+m, "\u6708"),
          value: r,
          offset: n
        };
      });
      this.setData({
        fmtedMonths: result
      });
    },
    monthClk: function monthClk(e) {
      var next = e.currentTarget.dataset.next;
      var _this$data2 = this.data,
          range = _this$data2.range,
          monthIdx = _this$data2.monthIdx;
      next && monthIdx < range.length - 1 && monthIdx++;
      !next && monthIdx > 0 && monthIdx--;
      this.setData({
        monthIdx: monthIdx
      });
    },
    getMonthIdx: function getMonthIdx() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.data.value;
      // 默认当前month
      var _this$data3 = this.data,
          range = _this$data3.range,
          separation = _this$data3.separation;
      var ym = (value && value.day || (0, _util.getMonth)()).split(separation).slice(0, 2).join('-');
      var idx = range.map(function (e) {
        return e.name;
      }).indexOf(ym);
      return idx;
    },
    dayClk: function dayClk(e) {
      var value = e.currentTarget.dataset.value;
      var _this$data4 = this.data,
          disabled = _this$data4.disabled,
          repeatable = _this$data4.repeatable,
          allDayValid = _this$data4.allDayValid;
      this.triggerEvent('dayclick', {
        value: value,
        disabled: disabled
      });

      if (!disabled && (value.state || allDayValid)) {
        if (repeatable || this.data.value !== value) {
          return this.triggerEvent('change', value);
        }
      }
    },
    // 例如： value是一个不可选日期, 应置空防止提交
    checkForbidVal: function checkForbidVal() {
      var _this$data5 = this.data,
          range = _this$data5.range,
          value = _this$data5.value;
      var monthIdx = this.getMonthIdx();
      var dates = range[monthIdx] && range[monthIdx].value;

      if (Array.isArray(dates) && dates.length > 0) {
        var dayIdx = dates.map(function (_ref2) {
          var day = _ref2.day;
          return day;
        }).indexOf(value.day);

        if (dayIdx > -1) {
          var state = dates[dayIdx].state;

          if (!state) {
            this.triggerEvent('change', '');
            console.log('设置了一个禁止的时间，置为未选择状态');
          }
        }
      }
    }
  }
});