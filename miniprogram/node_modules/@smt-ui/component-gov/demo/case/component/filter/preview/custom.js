/**
 * @file index.js
 * @author swan
 * @date 2020-02-21
 */

Page({
    data: {
        expState: false,
        selText: '',
        selections: [
            {
                text: '复合筛选器',
                slot: 'custom',
                value: [false, false, '', '', '', '', ''] // 默认值可能存在带入，filter-header不高亮情况，所以传数组
            }
        ],
        model: {
            // 看可办理事项
            handle: {
                type: 'switch',
                label: '看可办理事项',
                value: false
            },
            // 看可预约事项
            appointment: {
                type: 'switch',
                label: '看可预约事项',
                value: false
            },
            // 到现场次数
            times: {
                type: 'radio-group',
                title: '到现场次数',
                value: '',
                options: [
                    {name: '0次', value: 0},
                    {name: '1次', value: 1},
                    {name: '≥2次', value: 2}
                ],
                expand: true, // 是否展开，条件 options.length > 94
                disabled: true // 禁用则不会触发展开收起
            },
            // 主题
            subject: {
                type: 'radio-group',
                title: '主题',
                value: '',
                options: [
                    {name: '生育收养', value: 0},
                    {name: '户籍办理', value: 1},
                    {name: '民政宗教', value: 2},
                    {name: '教育科研', value: 3},
                    {name: '入伍服役', value: 4},
                    {name: '准营准办', value: 5},
                    {name: '其他选项1', value: 6},
                    {name: '其他选项2', value: 7},
                    {name: '其他选项3', value: 8},
                    {name: '其他选项4', value: 9},
                    {name: '其他选项5', value: 10},
                    {name: '其他选项6', value: 11},
                    {name: '其他选项7'},
                    {name: '其他选项8'},
                    {name: '其他选项9'},
                    {name: '其他选项10'},
                    {name: '其他选项11'}
                ],
                expand: false,
                disabled: false
            },
            // 对象
            target: {
                type: 'radio-group',
                title: '对象',
                value: '',
                options: [
                    {name: '高校毕业生'},
                    {name: '人才'},
                    {name: '老年人'},
                    {name: '残疾人'},
                    {name: '特困家庭'},
                    {name: '儿童青少年'}
                ],
                expand: true,
                disabled: true
            },
            // 生命周期
            lifecycle: {
                type: 'radio-group',
                title: '生命周期',
                value: '',
                options: ['升学', '工作', '购房', '结婚', '生育', '失业', '创业', '迁居', '退休', '修仙'],
                expand: false,
                disabled: false
            },
            // 类型
            type: {
                type: 'radio-group',
                title: '类型',
                value: '',
                options: ['行政许可', '行政处罚', '行政强制'],
                expand: true,
                disabled: true
            }
        },
        // 顺序
        order: ['handle', 'appointment', 'times', 'subject', 'target', 'lifecycle', 'type'],
        // 展开前的状态
        lastState: {},
        resetDisabled: true
    },
    selHdl({detail}) {
        console.log('选中的： ', detail);
        if (detail.filterIdx === 0) {
            let selText = '';
            for (const name of this.data.order) {
                const {type, value, label, title, options} = this.data.model[name];
                if (type === 'switch') {
                    selText += ` \n${label}: ${value ? '是' : '否'}`;
                }
                else if (type === 'radio-group') {
                    const item = options[value];
                    selText += value !== '' ? ` \n${title}: ${item.name || item}` : ` \n${title}: 无`;
                }
            }
            this.setData('selText', selText);
        }
    },

    /**
     * 展开面板
     * @param {Object} 事件
     */
    expandHdl({detail}) {
        const {filterIdx, expand} = detail;
        this.setData('expState', expand);
        // 自定义面板展开时，保留状态
        if (filterIdx === 0 && expand) {
            const state = {};
            for (const name of this.data.order) {
                const {expand, value} = this.data.model[name];
                state[name] = {
                    expand,
                    value
                };
            }
            this.setData('lastState', state);
        }
        console.log(expand ? '展开' : '收起');
    },

    /**
     * 没点确定就关闭面板
     * @param {Object} 事件
     */
    cancel({detail: idx}) {
        if (idx !== 0) {
            return;
        }
        // 没点确定就关闭，则还原上次状态
        for (const name of this.data.order) {
            const {expand, value} = this.data.lastState[name];
            this.setData({
                ['model.' + name + '.value']: value,
                ['model.' + name + '.expand']: expand
            });
        }
        this.updateReset();
    },


    /**
     * 各区域赋值
     */
    valChange(e) {
        console.log(e);
        let val = e.detail;
        console.log('valchange', val);
        let {name, type} = e.currentTarget.dataset;
        type === 'switch' && (val = e.detail.checked);
        let s = 'model.' + name + '.value';
        this.setData({
            [s]: val
        }, () => {
            console.log(this.data.model[name].value);
            this.updateReset();
        });
    },
    /**
     * 折叠展开赋值
     */
    cpsExpHdl(e) {
        console.log(e);
        let name = e.currentTarget.dataset.name;
        this.setData('model.' + name + '.expend', e.detail.expand);
    },

    /**
     * 面板确认按钮
     */
    ensure() {
        this.setValue(this.data.order.map(name => this.data.model[name].value));
    },
    /**
     * 回填
    */
    setValue(value) {
        const filterBody = this.selectComponent('#filter-body');
        filterBody.itemChange({
            detail: {
                value
            }
        });
    },


    /**
     * 面板重置按钮: 重置清空所有状态
     */
    reset() {
        for (const name of this.data.order) {
            const {type, options} = this.data.model[name];
            this.setData({
                ['model.' + name + '.value']: type === 'switch' ? false : '',
                ['model.' + name + '.expand']: options && options.length <= 9 && true
            }, () => {
                this.updateReset();
            });

        }
    },

    updateReset() {
        let a = this.data.order.map(
            name => {
                const value = this.data.model[name].value;
                console.log(value);
                return value === false ? '' : value;
            }
        ).join('');

        console.log('reset', a, !a);
        this.setData('resetDisabled', !a);
        // this.setData('resetDisabled', !this.data.order.map(
        //     name => {
        //         const value = this.data.model[name].value;
        //         return value === false ? '' : value;
        //     }
        // ).join(''));
    },


    // todo 方法

    onLoad() {
        console.log('selections', this.data.selections);
        this.updateReset();
    }
});
